@model dynamic

<div class="action-rail">
  <button type="button" id="btnSearchDetails" class="fab">搜尋</button>
  <button type="button" id="btnCalcAmount"  class="fab">金額計算</button>
  <button type="button" id="btnClearDetails" class="fab fab-red">清除單身</button>
  <button type="button" id="btnOutAddr" class="fab">出貨地址</button>
</div>

<script>
// 1) 金額計算
document.getElementById('btnCalcAmount')?.addEventListener('click', async (e) => {
  e.preventDefault(); e.stopPropagation();
  const paper = getPaperNum();
  if (!paper) return Swal.fire({icon:'info', title:'沒有單號'});

  try {
    const resp = await fetch('/api/StoredProc/exec', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ Key: 'CalcOrderAmount', Args: { PaperNum: paper } })
    });
    const raw = await resp.text();
    let data; try { data = JSON.parse(raw); } catch { data = { ok:false, error: raw }; }
    if (resp.ok && data.ok) {
      await Swal.fire({icon:'success', title:'計算完成', timer:900, showConfirmButton:false});
      location.reload();
    } else {
      Swal.fire({icon:'error', title:'呼叫失敗', text: data.error || `HTTP ${resp.status}`});
    }
  } catch (e2) {
    Swal.fire({icon:'error', title:'網路錯誤', text: String(e2)});
  }
});

// 2) 清除單身
document.getElementById('btnClearDetails')?.addEventListener('click', async (e) => {
  e.preventDefault(); e.stopPropagation();

  const paper   = getPaperNum();
  const paperId = (PAGE.detailTable || '').trim().replace(/^dbo\./i, '');
  if (!paper)  return Swal.fire({icon:'info', title:'沒有單號'});
  if (!paperId) return Swal.fire({icon:'info', title:'缺少單身表名（PaperId）'});

  const status = getHeaderValueByLabel('單據狀態') || '';
  const ALLOW  = ['作業中', '審核中'];
  const BLOCK  = ['已確認', '已結案', '作廢中'];
  if (BLOCK.includes(status) || !ALLOW.includes(status)) {
    return Swal.fire({ icon:'warning', title:'此狀態不可清除', html:`單據狀態：<b>${status || '（空）'}</b>`});
  }

  const { isConfirmed } = await Swal.fire({
    icon:'warning',
    title:'確定要清除這張單的所有單身嗎？',
    html:`單號：<b>${paper}</b><br>表：<code>${paperId}</code><br>狀態：<b>${status}</b>`,
    showCancelButton:true, confirmButtonText:'清除', cancelButtonText:'取消'
  });
  if (!isConfirmed) return;

  try {
    const resp = await fetch('/api/StoredProc/exec', {
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body: JSON.stringify({ Key:'ClearOrderDetails', Args:{ PaperNum: paper, PaperId: paperId, Item: 0 } })
    });
    const raw = await resp.text();
    let data; try { data = JSON.parse(raw); } catch { data = { ok:false, error: raw }; }
    if (resp.ok && data.ok) {
      const msg = (data.rows != null) ? `已清除 ${data.rows} 筆` : '清除完成';
      await Swal.fire({icon:'success', title: msg, timer:900, showConfirmButton:false});
      location.reload(); // 重新載入就會看到單身空了
    } else {
      Swal.fire({icon:'error', title:'清除失敗', text: data.error || `HTTP ${resp.status}`});
    }
  } catch (e2) {
    Swal.fire({icon:'error', title:'網路錯誤', text: String(e2)});
  }
});

// 3) 搜尋明細
document.getElementById('btnSearchDetails')?.addEventListener('click', (e)=>{
  e.preventDefault(); e.stopPropagation();
  const paper = getPaperNum();
  window.OrderDetailPicker_detailPicker?.open({ paperNum: paper });
});

document.getElementById('btnOutAddr')?.addEventListener('click', async (e) => {
  e.preventDefault(); e.stopPropagation();

  const paperNum = getPaperNum();
  const paperId = 'SPOdOrderMain';
  if (!paperNum) return Swal.fire({ icon:'info', title:'沒有單號' });

  // 1️⃣ 先載入出貨地址選項
  const resp = await fetch(`/api/OrderSubButton/GetOutAddrOptions?paperId=${paperId}&paperNum=${paperNum}`);
  const data = await resp.json();
  if (!data.ok) return Swal.fire({ icon:'error', title:'載入失敗', text:data.error });

  // 2️⃣ 顯示選擇視窗
  const options = data.list.map(x => `<option value="${x.Addr}" data-title="${x.Title}">${x.Addr}</option>`).join('');
  const { value: addr } = await Swal.fire({
    title: data.label || '出貨地址',
    html: `<select id="addrSel" class="swal2-select">${options}</select>`,
    showCancelButton: true,
    confirmButtonText: '確定',
    cancelButtonText: '取消',
    preConfirm: () => {
      const sel = document.getElementById('addrSel');
      return sel ? {
        addr: sel.value,
        title: sel.options[sel.selectedIndex].dataset.title
      } : null;
    }
  });
  if (!addr) return;

  // 3️⃣ 更新到主檔
  const updateResp = await fetch('/api/OrderSubButton/UpdateOutAddr', {
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body: JSON.stringify({
      paperId, paperNum,
      addr: addr.addr,
      title: addr.title
    })
  });
  const updateData = await updateResp.json();
  if (updateData.ok) {
    await Swal.fire({
      icon: 'success',
      title: '更新完成',
      timer: 1000,
      showConfirmButton: false
    });

    // ✅ 更新畫面值，不改掉標籤
    const addrField = document.querySelector('input[name="TransPlace"], input[name="OutAddr"], textarea[name="TransPlace"], textarea[name="OutAddr"]');
    const titleField = document.querySelector('input[name="PkgTitle"], input[name="ShipTo"], textarea[name="PkgTitle"], textarea[name="ShipTo"]');
    
    // 若是 input/textarea 直接設定 value
    if (addrField) addrField.value = addr.addr;
    if (titleField) titleField.value = addr.title;

    // 若是顯示在 span 或 div 裡面，則更新內部 span
    const addrValueEl = document.querySelector('[data-field="OutAddr"] span, [data-field="TransPlace"] span');
    const titleValueEl = document.querySelector('[data-field="ShipTo"] span, [data-field="PkgTitle"] span');

    if (addrValueEl) addrValueEl.textContent = addr.addr;
    if (titleValueEl) titleValueEl.textContent = addr.title;

    // ✅ 可選：閃爍提示使用者已更新
    [addrField, titleField, addrValueEl, titleValueEl].forEach(el => {
      if (!el) return;
      el.style.transition = 'background-color 0.5s';
      el.style.backgroundColor = '#fff8c4';
      setTimeout(() => el.style.backgroundColor = '', 800);
    });
  }
  else {
    Swal.fire({ icon: 'error', title: '更新失敗', text: updateData.error });
  }
});



</script>
