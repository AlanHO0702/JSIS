@using System.Text.Json
@{
    // PageModel Á´ØÂÖàÊää ViewData["ReportConfig"], ["Fields"], ["FieldDictList"] ÈÉΩÊ∫ñÂÇôÂ•Ω‰∫Ü
    var cfg = (ReportConfig)ViewData["ReportConfig"];
    var json = JsonSerializer.Serialize(cfg, new JsonSerializerOptions { PropertyNamingPolicy = null });
        // üîß ÊääËæ≠ÂÖ∏Ë°®Âêç‰πü‰∏üÁµ¶ partial
    ViewData["DictTableName"] = cfg.DictTableName ?? "";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<style>
  #resultTable th, #resultTable td {
    writing-mode: horizontal-tb !important;
    text-orientation: mixed !important;
    transform: none !important;
    white-space: nowrap;
    vertical-align: middle;
  }
  #resultTable thead th {
    background: #f5f8ff;
    font-weight: 700;
    letter-spacing: 1px;
  }
</style>

<div class="container my-4">
  <h3 class="text-primary fw-bold mb-3">@cfg.Title</h3>

  <!-- Êü•Ë©¢Ê¢ù‰ª∂ -->
  <div class="card p-3 mb-4 shadow-sm" id="queryPanel">
    <div class="row g-3 align-items-end" id="paramRows">
      @foreach (var def in cfg.ParamDefs)
      {
        <div class="col-md-3">
          <label class="form-label">@def.Label</label>

          @if (def.Ui == ParamUiType.Date)
          {
            <input type="date" class="form-control"
                   id="@def.Name" name="@def.Name"
                   value="" data-default="@def.DefaultValue" />
          }
          else if (def.Ui == ParamUiType.Select)
          {
            var lookupAttr = string.IsNullOrWhiteSpace(def.LookupKey)
                ? ""
                : $"data-lookup=\"{def.LookupKey}\"";

            <select class="form-select"
                    id="@def.Name" name="@def.Name"
                    @Html.Raw(lookupAttr)
                    data-default="@def.DefaultValue">
              <option value=""></option>
              @if (def.Options != null)
              {
                foreach (var (value, text) in def.Options)
                {
                  <option value="@value">@text</option>
                }
              }
            </select>
          }
          else if (def.Ui == ParamUiType.Number)
          {
            <input type="number" class="form-control"
                   id="@def.Name" name="@def.Name"
                   value="" data-default="@def.DefaultValue" />
          }
          else
          {
            <input type="text" class="form-control"
                   id="@def.Name" name="@def.Name"
                   value="" data-default="@def.DefaultValue" />
          }
        </div>
      }

      <div class="col-12 text-end">
        <button id="btnSearch" class="btn btn-primary px-4">Êü•Ë©¢</button>
      </div>
    </div>
  </div>

  <!-- ÁµêÊûú -->
  <div id="resultArea" class="card shadow-sm p-3" style="display:none;">
    <div class="table-responsive">
      <table class="table table-bordered table-hover align-middle text-center mb-0" id="resultTable">
        <thead class="table-light" id="tableHead"></thead>
        <tbody id="tableBody"></tbody>
      </table>
    </div>
  </div>
</div>
@* F3 ÂÖ±Áî®Ëæ≠ÂÖ∏ Modal *@
@await Html.PartialAsync("~/Pages/Shared/_FieldDictModal.cshtml", Model.FieldDictList, ViewData)
<script src="~/js/fieldDictModal.js"></script>
<script>
(function () {
  // --- ÂæåÁ´ØÂÇ≥‰æÜÁöÑÂ†±Ë°®Ë®≠ÂÆö ---
  const cfg = @Html.Raw(json);
  cfg.ParamDefs = cfg.ParamDefs || [];

  // --- ‰æõ renderTable ‰ΩøÁî®ÁöÑËæ≠ÂÖ∏Ê¨Ñ‰ΩçÔºàÂè™Âê´ Visible=1ÔºåÂ∑≤ÊéíÂ∫èÔºâ ---
  window._tableFields = @Html.Raw(Json.Serialize(ViewData["Fields"] ?? new object()));

  // ====== ÈÄöÁî®Â∑•ÂÖ∑ ======
  function pad2(n){ return String(n).padStart(2,'0'); }
  function todayOffset(expr){
    if (!expr || !/^today([+-]\d+d)?$/i.test(expr)) return '';
    const m = expr.match(/^today([+-]\d+)?d?$/i);
    const d = new Date();
    if (m && m[1]) d.setDate(d.getDate() + parseInt(m[1],10));
    return `${d.getFullYear()}-${pad2(d.getMonth()+1)}-${pad2(d.getDate())}`;
  }

  async function loadLookup(key, el){
    try{
      const res = await fetch(`/api/Report/lookup/${key}`);
      if (!res.ok) throw 0;
      const data = await res.json(); // [{value,text}]
      data.forEach(o=>{
        const opt = document.createElement('option');
        opt.value = o.value ?? '';
        opt.textContent = o.text ?? '';
        el.appendChild(opt);
      });
    }catch{
      // ‰øùÂ∫ïËá≥Â∞ëÊúâ‰∏ÄÂÄã "(‰∏çÈôê)"
      if (!el.querySelector('option')) {
        const opt = document.createElement('option');
        opt.value = ''; opt.textContent = '(‰∏çÈôê)';
        el.appendChild(opt);
      }
    }
  }

  // ====== ÂàùÂßãÂåñÊ¢ù‰ª∂ÔºàËºâÂÖ•‰∏ãÊãâ + Â•óÈ†êË®≠ÂÄºÔºâ ======
  async function initParams(){
    const jobs = [];
    (cfg.ParamDefs || []).forEach(def=>{
      const el = document.getElementById(def.Name);
      if (!el) return;
      const key = el.dataset.lookup;  // Êúâ data-lookup ÊâçÊâì API
      if (key) jobs.push(loadLookup(key, el));
    });
    await Promise.all(jobs);

    // È†êË®≠ÂÄºÔºàÊó•ÊúüÊîØÊè¥ today / today-120d ...Ôºâ
    (cfg.ParamDefs || []).forEach(def=>{
      const el = document.getElementById(def.Name);
      if (!el) return;
      const defVal = el.dataset.default || def.DefaultValue || "";
      if (def.Ui === 1 /* Date */ && typeof defVal === 'string' && defVal.startsWith('today')) {
        el.value = todayOffset(defVal);
      } else {
        el.value = defVal;
      }
    });
  }

  // ====== ÂëºÂè´ SP ======
  async function doSearch(){
    const payload = { spName: cfg.SpName, params: {} };

    (cfg.ParamDefs || []).forEach(def=>{
      const el = document.getElementById(def.Name);
      let v = el ? (el.value ?? "") : "";
      // ÂæåÁ´ØÂ∏åÊúõ‰∏çË¶Å NULLÔºåÁµ±‰∏ÄÁµ¶Á©∫Â≠ó‰∏≤ÔºõUseId È†êË®≠ A001
      if (def.Name === "UseId" && !v) v = "A001";
      payload.params[def.Name] = v;
    });

    const res = await fetch('/api/Report/exec', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok){ alert(await res.text()); return; }

    const data = await res.json();   // { Columns:[], Rows:[] }
    // console.log('cols from API:', data.Columns);
    // console.log('rows count:', Array.isArray(data.Rows) ? data.Rows.length : 0);
    window.renderTable?.(data.Columns, data.Rows);
  }

  // ====== Áπ™Ë°® ======
  window.renderTable = function(apiColumns, rows){
    const thead = document.getElementById('tableHead');
    const tbody = document.getElementById('tableBody');

    const dictFields = (window._tableFields || [])
      .filter(f => f.Visible)
      .sort((a,b) => (a.SerialNum ?? 0) - (b.SerialNum ?? 0));

    // ÂæåÁ´ØÊ¨Ñ‰ΩçÔºàÂøΩÁï•Â§ßÂ∞èÂØ´ÔºâÔºõËã•Ê≤íÁµ¶ ColumnsÔºåÂ∞±Áî®Á¨¨‰∏ÄÂàó rows ÁöÑ keys
    let apiColsLower = [];
    if (Array.isArray(apiColumns) && apiColumns.length) {
      apiColsLower = apiColumns.map(c => String(c).toLowerCase());
    } else if (Array.isArray(rows) && rows.length) {
      apiColsLower = Object.keys(rows[0]).map(k => k.toLowerCase());
    }

    // Áî®ÂøΩÁï•Â§ßÂ∞èÂØ´ÊñπÂºèÈÖçÂ∞çËæ≠ÂÖ∏Ê¨Ñ‰Ωç
    let cols = dictFields.filter(f => apiColsLower.includes(String(f.FieldName).toLowerCase()));

    // Ëã•ÈÖç‰∏çÂà∞Â∞± fallbackÔºöÊääÁ¨¨‰∏ÄÂàóÁöÑÊâÄÊúâ key ÂÖ®ÈÉ®È°ØÁ§∫
    if (!cols.length && Array.isArray(rows) && rows.length) {
      const keys = Object.keys(rows[0]);
      cols = keys.map(k => ({ FieldName: k, DisplayLabel: k, FormatStr: "" }));
    }

    // Ë°®È†≠
    thead.innerHTML = `<tr>${
      cols.map(c => `<th>${(c.DisplayLabel || c.FieldName)}</th>`).join('')
    }</tr>`;

    // Ê†ºÂºèÂåñ
    function fmt(v, format) {
      if (v == null || format === "") return v ?? "";
      if (/^(yyyy\/MM\/dd|yyyy-MM-dd)$/.test(format)) {
        const d = (typeof v === 'string') ? new Date(v) : v;
        if (isNaN(d)) return v ?? "";
        const y=d.getFullYear(), m=String(d.getMonth()+1).padStart(2,'0'), dd=String(d.getDate()).padStart(2,'0');
        return format.includes('/') ? `${y}/${m}/${dd}` : `${y}-${m}-${dd}`;
      }
      if (typeof v === 'number' && /^#,#*0(\.[0#]+)?$/.test((format||'').replace(/ /g,''))) {
        const m = format.match(/\.(0+|#+)?$/);
        const max = m?.[0]?.length ? m[0].length-1 : 0;
        return v.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: Math.max(0,max) });
      }
      return v;
    }

    // Ë°®Ë∫´
    tbody.innerHTML = (rows || []).map(r => `<tr>${
      cols.map(c => {
        const raw = r[c.FieldName];
        const text = fmt(raw, c.FormatStr || "");
        return `<td>${text ?? ''}</td>`;
      }).join('')
    }</tr>`).join('');

    document.getElementById('resultArea').style.display = '';
  };

   // ====== F3 Ëæ≠ÂÖ∏ÔºàÊ¨Ñ‰ΩçÂèØË¶ñ/‰∏≠Êñá/È†ÜÂ∫èÔºâ ======
  // Êèê‰æõÁµ¶ fieldDictModal.js Áî®
  window._dictTableName = cfg.DictTableName || (cfg.TableName || "");
  console.log('dict name =', window._dictTableName); // debug
  function openFieldDict() {
    const el = document.getElementById("fieldDictModal");
    if (!el) return;

    // ÂÖàËºâÂÖ• modal ÂÖßÂÆπÔºà‰Ω†ÁöÑ fieldDictModal.js ÊúÉÂÆöÁæ©ÈÄôÂÄãÔºâ
    if (typeof window.initFieldDictModal === "function") {
      // Â∏∂ modalIdÔºåÈÅøÂÖçÊäìÈåØ tbody
      window.initFieldDictModal(window._dictTableName, "fieldDictModal");
    } else if (typeof window.loadFieldDict === "function") {
      window.loadFieldDict(window._dictTableName);
    }

    // È°ØÁ§∫ Bootstrap Modal
    const modal = new bootstrap.Modal(el);
    modal.show();
  }

  // F3 ÁÜ±ÈçµÔºàÈÅøÂÖçÂú®ÊñáÂ≠óËº∏ÂÖ•‰∏≠Ë™§Ëß∏Ôºâ
  document.addEventListener("keydown", (e) => {
    const tag = (e.target.tagName || "").toLowerCase();
    const inText = tag === "input" || tag === "textarea" || e.target.isContentEditable;
    if (e.key === "F3" && !inText) {
      e.preventDefault();
      openFieldDict();
    }
  });

  // ÂÑ≤Â≠òÊàêÂäüÂæåÔºåËÆìÂ†±Ë°®Á´ãÂàªÂ•óÁî®ÊúÄÊñ∞‰∏≠Êñá/ÂèØË¶ñ/È†ÜÂ∫è
  window.addEventListener("field-dict-saved", () => location.reload());


  // Á∂Å‰∫ã‰ª∂
  document.addEventListener('DOMContentLoaded', () => {
    initParams();
    document.getElementById('btnSearch')?.addEventListener('click', e=>{
      e.preventDefault();
      doSearch();
    });
  });
})();


</script>
