@using PcbErpApi.Models
@model dynamic

@{
    var fields = ViewData["Fields"] as List<TableFieldViewModel>;
    if (fields == null) { <text>查無欄位設定</text>; return; }
    var items = Model.Items;
    var totalCount = Model.TotalCount;
    var pageNumber = Model.PageNumber;
    var pageSize = Model.PageSize;
    var subRouteTemplate = ViewData["SubRouteTemplate"] as string ?? "";
    var paginationVm = ViewData["PaginationVm"] as PaginationModel;

    // 新增API路徑與單身頁路徑，從 ViewData 傳（預設值也可寫死）
    var addApiUrl = ViewData["AddApiUrl"] as string ?? "/api/SPOdOrderMain";
    var detailRouteTemplate = ViewData["SubRouteTemplate"] as string ?? "/SpodOrderSubs/{PaperNum}";
    var lookupMapData = ViewData["LookupDisplayMap"] as Dictionary<string, Dictionary<string, string>>;
    var keyFieldName = ViewData["KeyFieldName"]?.ToString() ?? "PaperNum";
    var tableName = ViewData["DictTableName"]?.ToString() ?? "SPOdOrderMain";
}
<script>
    window._tableName = "@tableName";
    window._tableFields = @Html.Raw(Json.Serialize(fields));
    window._lookupMapData = @Html.Raw(Json.Serialize(lookupMapData ?? new Dictionary<string, Dictionary<string, string>>()));
    window._keyFieldName = "@keyFieldName";
    window._detailRouteTemplate = "@detailRouteTemplate";
</script>

<style>
    body { background: #f7f9fb; }
    .container { max-width: 1100px; }
    .title-row { display: flex; justify-content: space-between; align-items: flex-end; }
    .order-count { font-size: 1rem; color: #666; margin-bottom: 6px; }
    .table { box-shadow: 0 2px 12px 0 #c3d4e6; border-radius: 16px; overflow: hidden; background: #fff; }
    .table th, .table td { vertical-align: middle !important; white-space: nowrap; font-size: 1rem; border: none; }
    .table th {
        background: linear-gradient(90deg, #e8f2fe 0%, #f3f8ff 100%);
        color: #2056ac; letter-spacing: 2px; font-weight: 600;
        border-bottom: 2px solid #bdd2f7; padding: 14px 10px;
    }
    .table tbody tr { transition: background .15s; }
    .table tbody tr:hover { background: #f0f8ff !important; }
    .table td { border-top: 1px solid #f0f3f7 !important; padding: 11px 10px; }
    .status-done { color: #29963b; background: #e5f7e6; border-radius: 8px; padding: 2px 10px; font-weight: bold; letter-spacing: 1px; font-size: 1.05em;}
    .status-pending { color: #c88400; background: #fff9e3; border-radius: 8px; padding: 2px 10px; font-weight: bold; letter-spacing: 1px; font-size: 1.05em;}
    .row-link { cursor: pointer; }
    .pagination-bar { margin: 20px 0 30px 0; }
    .pagination .page-link { color: #3a72d9; border-radius: 6px !important; margin: 0 2px; }
    .pagination .page-item.active .page-link { background: #3a72d9; color: #fff; border: none; }
    .pagination .page-item.disabled .page-link { color: #aaa; pointer-events: none; background: #f1f4f8; }
    .table-wrap {
        max-width: 100%;            /* 不會超過container寬 */
        overflow-x: auto;           /* 超過寬度自動出現橫向捲軸 */
        margin: 0 auto;             /* 水平置中 */
        background: #fff;           /* 可視需求 */
        border-radius: 16px;
        box-shadow: 0 2px 12px 0 #c3d4e6;
    }
    .table {
        min-width: 1200px;          /* 最小寬，根據欄位數量調整 */
        margin-bottom: 0;
    }
    tr.selected td, tr.selected:hover td {
        background-color: #ffe6e6 !important;
    }
    .highlight {
        background-color: #ffd !important;
    }
    .ghost {
        opacity: 0.5;
    }
    #search-panel {
    background: #f8fafb;
    border-radius: 10px;
    padding: 14px 18px;
    margin-top: 12px;
    margin-bottom: 18px;
    box-shadow: 0 2px 6px 0 #e2e8f0;
    }
    #search-panel label {
        margin-bottom: 2px;
        font-size: 0.93em;
        color: #286bb5;
    }
    .table-hscroll-proxy{
    position: sticky;     /* 黏在視窗頂端 */
    top: 0;               /* 如果上面有固定工具列，改成相對高度 */
    z-index: 100;         /* 比表頭更高，避免被蓋住 */
    background: #fff;     /* 看起來乾淨 */
    }

    .hscroll-track{
    height: 14px;
    overflow-x: auto;
    overflow-y: hidden;
    scrollbar-gutter: stable both-edges; /* 留出滾動條空間，避免忽隱忽現 */
    border-bottom: 1px solid #eaeef4;
    }

    .hscroll-spacer{ height: 1px; }  /* 只負責撐寬度 */



</style>

<div class="container my-5">
    <div class="title-row mb-4 border-bottom pb-2">
        <div style="display:flex;align-items:center;gap:16px;">
            <h2 class="mb-0 text-primary" style="font-weight:700;letter-spacing:3px;">@ViewData["TableTitle"]</h2>
            @await Html.PartialAsync("_TableToolbar", new TableToolbarModel {
                SearchBtnId = "btnSearch",
                AddBtnId = "btnAddNew",
                DeleteBtnId = "btnBatchDelete",
                QueryFields = ViewData["QueryFields"] as List<QueryFieldViewModel>,
                ModalId = "searchModal",
                ReportSpName = ViewData["ReportSpName"]?.ToString() ?? ""   // 👈 從外層再傳進來
            })
        </div>
        <span class="order-count" id="orderCountInfo">
            共 <span style="font-weight:bold">@Model.TotalCount</span> 筆，
            顯示第 @(((Model.PageNumber - 1) * Model.PageSize) + 1)
            ~ @(Math.Min(Model.PageNumber * Model.PageSize, Model.TotalCount)) 筆
        </span>
    </div>

    <!-- 頂端同步卷軸（放在 table-wrap 外面） -->
    <div class="table-hscroll-proxy" id="tableHScrollTop">
    <div class="hscroll-track" id="hscrollTop">
        <div class="hscroll-spacer" id="hscrollSpacer"></div>
    </div>
    </div>

    <div class="table-wrap">
        <table class="table table-hover align-middle text-center">
            <thead>
                <tr id="table-header-row">
                    @foreach (var field in fields)
                    {
                        <th class="sortable" draggable="true" data-field="@field.FieldName" data-serial="@field.SerialNum">
                            @(string.IsNullOrWhiteSpace(field.DisplayLabel) ? field.FieldName : field.DisplayLabel)
                        </th>
                    }
                </tr>
            </thead>
            <tbody id="dataTbody"></tbody>
                <!-- 資料由 JS 動態產生 -->
            </tbody>
        </table>
    <div class="pagination-bar" id="paginationBar"> 
        <!-- 資料由 JS 動態產生 -->
        @if (paginationVm != null) { @await Html.PartialAsync("_Pagination", paginationVm) }
    </div>
</div>


<!-- 這一行一定要在所有 <script> 之前獨立放，不要包在 <script> 裡！ -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script src="~/js/toolbarHandler.js"></script>

<script>
    let selectedPaperNum = null;
    const addApiUrl = '@addApiUrl';
    const detailRouteTemplate = '@detailRouteTemplate';

    function saveQueryState(filters, pageNumber) {
        localStorage.setItem("orderListQueryFilters", JSON.stringify(filters));
        localStorage.setItem("orderListPageNumber", String(pageNumber));
    }

    function loadQueryState() {
        const filtersStr = localStorage.getItem("orderListQueryFilters");
        const pageStr = localStorage.getItem("orderListPageNumber");
        return {
            filters: filtersStr ? JSON.parse(filtersStr) : null,
            pageNumber: pageStr ? parseInt(pageStr) : null
        };
    }

    let lastQueryFilters = [];

    document.addEventListener("DOMContentLoaded", function () {

        new ToolbarHandler({
            searchBtnId: "btnSearch",
            addBtnId: "btnAddNew",
            deleteBtnId: "btnBatchDelete",
            getSelectedId: () => {
                const selectedRow = document.querySelector("#dataTbody tr.selected");
                return selectedRow ? selectedRow.getAttribute("data-paper-num") : null;
            },   // ← 這裡加上逗號 !!!
            modalId: "searchModal",   // 一定要加
            formId: "searchForm",     // 一定要加
            addApiUrl: "@addApiUrl",
            deleteApiUrlFn: (id) => `/api/${"@tableName"}/${id}`,
            detailRouteTemplate: "@(detailRouteTemplate)",
            tableName: "@tableName",
            pageSize: 50,
            renderTable: renderTable,
            renderPagination: renderPagination,
            renderOrderCount: renderOrderCount,
            restoreSearchForm: restoreSearchForm,
            queryRedirectUrl: "/@tableName"
        });


         // ✅ 拖曳表頭欄位
        const headerRow = document.getElementById("table-header-row");

        if (headerRow) {
           Sortable.create(headerRow, {
                        animation: 150,
                        swap: true,                     // ✅ 使用 swap 模式
                        swapClass: 'highlight',         // ✅ 拖曳時加 highlight 效果
                        ghostClass: 'ghost',            // 可選：拖曳時原位置樣式
                        onEnd: function () {
                            const newOrder = Array.from(headerRow.children).map((th, index) => ({
                                fieldName: th.dataset.field,
                                serialNum: index + 1
                            }));

                            fetch('/api/TableFieldLayout/SaveSerialOrder', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    tableName: window._tableName,
                                    fieldOrders: newOrder
                                })
                            })
                            .then(res => {
                                if (!res.ok) throw new Error("更新失敗");
                                return res.json();
                            })
                            .then(() => {
                                location.reload();
                            })
                            .catch(err => {
                                console.error(err);
                                Swal.fire({ icon: 'error', title: '欄位順序儲存失敗！' });
                            });
                    }
            });

        }
           // --- 下面是新加的"雙擊表頭欄位排序" ---
            let lastSort = { col: null, asc: true };

            function getCellValue(tr, idx) {
                const cell = tr.children[idx];
                // 數字欄位自動去除逗號
                let val = cell ? cell.textContent.trim().replace(/,/g, '') : '';
                if (val === '') return 0; // 空值視為0
                if (!isNaN(val)) return parseFloat(val); // 若為數字就轉 float
                return val;
            }

            document.querySelectorAll("th.sortable").forEach(function (th, idx) {
                th.addEventListener("dblclick", function () {
                    const table = th.closest('table');
                    const tbody = table.querySelector('tbody');
                    const rows = Array.from(tbody.querySelectorAll('tr'));
                    const colIdx = idx;

                    // 切換正序/反序
                    let asc = true;
                    if (lastSort.col === colIdx) asc = !lastSort.asc;
                    lastSort = { col: colIdx, asc: asc };

                    rows.sort((a, b) => {
                        let aVal = getCellValue(a, colIdx);
                        let bVal = getCellValue(b, colIdx);

                        // 數字/日期排數字，其他欄位用字串
                        if (typeof aVal === "number" && typeof bVal === "number") {
                            return asc ? aVal - bVal : bVal - aVal;
                        }
                        // 字串排序（不區分大小寫）
                        aVal = aVal + '';
                        bVal = bVal + '';
                        return asc ? aVal.localeCompare(bVal, 'zh-Hant') : bVal.localeCompare(aVal, 'zh-Hant');
                    });

                    // 重新插入排序後的 row
                    rows.forEach(tr => tbody.appendChild(tr));
                });
            });

        function renderTable(data) {
            const tbody = document.getElementById('dataTbody');
            tbody.innerHTML = ""; // 清空

            const fields = window._tableFields;
            const lookupMapData = window._lookupMapData;
            const keyFieldName = window._keyFieldName;
            const subRouteTemplate = "@(detailRouteTemplate)";

            data.forEach(item => {
                const keyValue = item[keyFieldName] || "";
                let rowUrl = "";
                if (subRouteTemplate && keyValue)
                    rowUrl = subRouteTemplate.replace("{PaperNum}", keyValue);

                const tr = document.createElement('tr');
                tr.className = "row-link";
                tr.setAttribute('data-url', rowUrl);
                tr.setAttribute('data-paper-num', keyValue);

                fields.forEach(field => {
                    let valStr = "";
                    // lookup
                    let display = "";
                    if (
                        keyValue &&
                        lookupMapData &&
                        lookupMapData[keyValue] &&
                        lookupMapData[keyValue][field.FieldName]
                    ) {
                        display = lookupMapData[keyValue][field.FieldName];
                        valStr = display;
                    } else {
                        // 原始值
                        let rawValue = item[field.FieldName];
                        const dt = (field.DataType || "").toLowerCase();

                        // 後端已做格式化，通常會是字串；前端不要再轉
                        if (rawValue === null || rawValue === undefined) {
                        valStr = "";
                        } else if (typeof rawValue === "string") {
                        // 例如 "4,644"、"2025/06/26 上午 10:57:14"：直接用
                        valStr = rawValue;
                        } else if (dt === "number" && typeof rawValue === "number") {
                        // 少數還回 number 的情況下，補個千分位
                        valStr = rawValue.toLocaleString();
                        } else {
                        // 其他型別就做保守轉字串
                        valStr = String(rawValue);
                        }
                    }
                    const td = document.createElement('td');
                    td.innerHTML = valStr ?? "";
                    tr.appendChild(td);
                });

                tbody.appendChild(tr);
            });

            highlightLastViewedRow();

            // 點擊行：選取，不跳頁
            document.querySelectorAll(".row-link").forEach(function(row) {
                row.addEventListener("click", function(e) {
                    document.querySelectorAll(".row-link.selected").forEach(r => r.classList.remove("selected"));
                    row.classList.add("selected");
                    window.selectedPaperNum = row.getAttribute("data-paper-num");
                });

            // 雙擊行：跳單身
                row.addEventListener("dblclick", function() {
                    var url = row.getAttribute("data-url");
                    if(url) window.location = url;
                });
            });
            // 重新產生列之後，更新頂端卷軸寬度
            if (window.refreshHScrollWidth) window.refreshHScrollWidth();

        }

        function renderPagination(totalCount, pageSize, pageNumber) {
            const totalPages = Math.ceil(totalCount / pageSize);
            if (totalPages <= 1) {
                document.getElementById("paginationBar").innerHTML = "";
                return;
            }
            let html = '<nav><ul class="pagination justify-content-center">';
            html += `<li class="page-item ${pageNumber === 1 ? "disabled" : ""}">
                <a class="page-link" href="#" data-page="${pageNumber - 1}">上一頁</a></li>`;

            let start = Math.max(1, pageNumber - 2);
            let end = Math.min(totalPages, pageNumber + 2);

            if (start > 2) {
                html += `<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`;
                html += `<li class="page-item"><a class="page-link" href="#" data-page="2">2</a></li>`;
                html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
            } else {
                for (let i = 1; i < start; i++) {
                    html += `<li class="page-item"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
                }
            }

            for (let i = start; i <= end; i++) {
                html += `<li class="page-item ${i === pageNumber ? "active" : ""}">
                    <a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
            }

            if (end < totalPages - 2) {
                html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
                html += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages - 1}">${totalPages - 1}</a></li>`;
                html += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a></li>`;
            } else {
                for (let i = end + 1; i <= totalPages; i++) {
                    html += `<li class="page-item"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
                }
            }
            html += `<li class="page-item ${pageNumber === totalPages ? "disabled" : ""}">
                <a class="page-link" href="#" data-page="${pageNumber + 1}">下一頁</a></li>`;
            html += '</ul></nav>';

            document.getElementById("paginationBar").innerHTML = html;

            // 綁定事件
            document.querySelectorAll('#paginationBar a[data-page]').forEach(a => {
                a.addEventListener('click', function (e) {
                    e.preventDefault();
                    let targetPage = parseInt(this.getAttribute('data-page'));
                    if (!isNaN(targetPage) && targetPage > 0) {
                        doQuery(targetPage); // 用 AJAX 查新頁
                    }
                });
            });

        }
        // 你可記錄當前查詢條件，以便查下一頁時重用


        function doQuery(page = 1) {
            // 以 lastQueryFilters 當作查詢條件（如果是查詢表單送出時也要同步更新 lastQueryFilters）
            let filters = lastQueryFilters.slice();
            // 找到並更新 page/pageSize
            let foundPage = false, foundPageSize = false;
            filters.forEach(f => {
                if (f.Field === "page") { f.Value = String(page); foundPage = true; }
                if (f.Field === "pageSize") { f.Value = "@Model.PageSize"; foundPageSize = true; }
            });
            if (!foundPage) filters.push({ Field: "page", Op: "", Value: String(page) });
            if (!foundPageSize) filters.push({ Field: "pageSize", Op: "", Value: "@Model.PageSize" });

            saveQueryState(filters, page);

            fetch('/api/PagedQuery/PagedQuery', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    table: window._tableName,    // ← 指定你查哪個表
                    filters: filters           // ← 原本組好的查詢條件
                })
            }).then(resp => resp.json())
            .then(result => {
                window._lookupMapData = result.lookupMapData;   // <--- 必加這行
                renderTable(result.data);
                renderPagination(result.totalCount, @Model.PageSize, page);
                renderOrderCount(result.totalCount, @Model.PageSize, page);
            });
        }

        function renderOrderCount(totalCount, pageSize, pageNumber) {
            const start = (pageNumber - 1) * pageSize + 1;
            const end = Math.min(pageNumber * pageSize, totalCount);
            document.getElementById('orderCountInfo').innerHTML = `共 <span style="font-weight:bold">${totalCount}</span> 筆，顯示第 ${start} ~ ${end} 筆`;
        }

        function restoreSearchForm(filters) {
            if (!filters) return;
            filters.forEach(f => {
                if (f.Field !== "page" && f.Field !== "pageSize") {
                    // 同時找多組 CustomerId5, CustomerId6 ... input
                    let inputEls = document.querySelectorAll(`#searchForm [name^='${f.Field}']`);
                    inputEls.forEach(el => {
                        // 只帶空值才填
                        if (!el.value) el.value = f.Value;
                    });
                }
                let condEls = document.querySelectorAll(`#searchForm [name^='Cond_${f.Field}']`);
                condEls.forEach(condEl => {
                    if (condEl && f.Op) condEl.value = f.Op;
                });
            });
        }

        function highlightLastViewedRow() {
            const lastPaperNum = localStorage.getItem("lastViewedPaperNum");
            //console.log('highlight row', lastPaperNum); // ←看有沒有抓到
            if (!lastPaperNum) return;

            const tr = document.querySelector(`tr[data-paper-num="${lastPaperNum}"]`);
            if (tr) {
                tr.classList.add('selected');
                window.selectedPaperNum = lastPaperNum;   // 👈 補這行
                tr.scrollIntoView({ behavior: "smooth", block: "center" });
            }
            // 清掉避免下次又 highlight
            localStorage.removeItem("lastViewedPaperNum");
        }


        // 檢查 localStorage 有查詢條件就自動查詢，否則顯示初始
        const { filters, pageNumber } = loadQueryState();
        if (filters && filters.length > 0) {
            lastQueryFilters = filters;
            restoreSearchForm(filters);  // 還原查詢表單
            doQuery(pageNumber || 1);
        } else {
            renderTable(@Html.Raw(Json.Serialize(Model.Items)));
        }

    });


    (function initTopHScroll(){
    const wrap   = document.querySelector('.table-wrap');           // 真正可左右捲的容器
    if (!wrap) return;
    const table  = wrap.querySelector('table');
    const topBar = document.getElementById('hscrollTop');
    const spacer = topBar?.querySelector('.hscroll-spacer');

    if (!table || !topBar || !spacer) return;

    function measure(){
        // 讓頂端假的卷軸寬度 == 表格實際滾動寬
        spacer.style.width = table.scrollWidth + 'px';
        // 初次載入也同步一下位置
        topBar.scrollLeft = wrap.scrollLeft;
    }

    let syncing = false;
    topBar.addEventListener('scroll', () => {
        if (syncing) return;
        syncing = true;
        wrap.scrollLeft = topBar.scrollLeft;
        syncing = false;
    });

    wrap.addEventListener('scroll', () => {
        if (syncing) return;
        syncing = true;
        topBar.scrollLeft = wrap.scrollLeft;
        syncing = false;
    });

    window.addEventListener('resize', measure);

    // 給外面呼叫（換頁或重新繪製表格後）
    window.refreshHScrollWidth = measure;

    // 初次
    measure();
    })();


    // List 頁：點修改 → 跳轉前檢查
    btnViewEditToggle.addEventListener("click", () => {
        const id = window.selectedPaperNum;
        if (!id) {
            Swal.fire({ icon: 'warning', title: '請先選擇一筆單據' });
            return;
        }

        const row = document.querySelector(`tr[data-paper-num="${id}"]`);
        const status = row?.querySelector("td:nth-child(6)")?.textContent.trim() || '';

        if (window.BLOCK_STATUSES && window.BLOCK_STATUSES.includes(status)) {
            Swal.fire({
                icon: 'warning',
                title: '無法修改',
                text: `此單據狀態為「${status}」，不可進行修改。`
            });
            return; // 阻止跳轉
        }

        const url = detailRouteTemplate.replace("{PaperNum}", id);
        window.location.href = url;
    });
    
    
    window.addEventListener('pageshow', function (event) {
        if (event.persisted || (window.performance && window.performance.getEntriesByType("navigation")[0]?.type === "back_forward")) {
            //location.reload();
        }
    });


</script>

