@using PcbErpApi.Models
@model dynamic

@{
    var fields = ViewData["Fields"] as List<TableFieldViewModel>;
    if (fields == null) { <text>查無欄位設定</text>; return; }
    var items = Model.Items;
    var totalCount = Model.TotalCount;
    var pageNumber = Model.PageNumber;
    var pageSize = Model.PageSize;
    var subRouteTemplate = ViewData["SubRouteTemplate"] as string ?? "";
    var paginationVm = ViewData["PaginationVm"] as PaginationModel;

    // 新增API路徑與單身頁路徑，從 ViewData 傳（預設值也可寫死）
    var addApiUrl = ViewData["AddApiUrl"] as string ?? "/api/SPOdOrderMain";
    var detailRouteTemplate = ViewData["SubRouteTemplate"] as string ?? "/SpodOrderSubs/{PaperNum}";
    var lookupMapData = ViewData["LookupDisplayMap"] as Dictionary<string, Dictionary<string, string>>;
    var keyFieldName = ViewData["KeyFieldName"]?.ToString() ?? "PaperNum";
}

<style>
    body { background: #f7f9fb; }
    .container { max-width: 1100px; }
    .title-row { display: flex; justify-content: space-between; align-items: flex-end; }
    .order-count { font-size: 1rem; color: #666; margin-bottom: 6px; }
    .table { box-shadow: 0 2px 12px 0 #c3d4e6; border-radius: 16px; overflow: hidden; background: #fff; }
    .table th, .table td { vertical-align: middle !important; white-space: nowrap; font-size: 1rem; border: none; }
    .table th {
        background: linear-gradient(90deg, #e8f2fe 0%, #f3f8ff 100%);
        color: #2056ac; letter-spacing: 2px; font-weight: 600;
        border-bottom: 2px solid #bdd2f7; padding: 14px 10px;
    }
    .table tbody tr { transition: background .15s; }
    .table tbody tr:hover { background: #f0f8ff !important; }
    .table td { border-top: 1px solid #f0f3f7 !important; padding: 11px 10px; }
    .status-done { color: #29963b; background: #e5f7e6; border-radius: 8px; padding: 2px 10px; font-weight: bold; letter-spacing: 1px; font-size: 1.05em;}
    .status-pending { color: #c88400; background: #fff9e3; border-radius: 8px; padding: 2px 10px; font-weight: bold; letter-spacing: 1px; font-size: 1.05em;}
    .row-link { cursor: pointer; }
    .pagination-bar { margin: 20px 0 30px 0; }
    .pagination .page-link { color: #3a72d9; border-radius: 6px !important; margin: 0 2px; }
    .pagination .page-item.active .page-link { background: #3a72d9; color: #fff; border: none; }
    .pagination .page-item.disabled .page-link { color: #aaa; pointer-events: none; background: #f1f4f8; }
    .table-wrap {
        max-width: 100%;            /* 不會超過container寬 */
        overflow-x: auto;           /* 超過寬度自動出現橫向捲軸 */
        margin: 0 auto;             /* 水平置中 */
        background: #fff;           /* 可視需求 */
        border-radius: 16px;
        box-shadow: 0 2px 12px 0 #c3d4e6;
    }
    .table {
        min-width: 1200px;          /* 最小寬，根據欄位數量調整 */
        margin-bottom: 0;
    }
    tr.selected td, tr.selected:hover td {
        background-color: #ffe6e6 !important;
    }
    .highlight {
        background-color: #ffd !important;
    }
    .ghost {
        opacity: 0.5;
    }
    #search-panel {
    background: #f8fafb;
    border-radius: 10px;
    padding: 14px 18px;
    margin-top: 12px;
    margin-bottom: 18px;
    box-shadow: 0 2px 6px 0 #e2e8f0;
    }
    #search-panel label {
        margin-bottom: 2px;
        font-size: 0.93em;
        color: #286bb5;
    }

</style>

<div class="container my-5">
    <div class="title-row mb-4 border-bottom pb-2">
        <div style="display:flex;align-items:center;gap:16px;">
            <h2 class="mb-0 text-primary" style="font-weight:700;letter-spacing:3px;">@ViewData["TableTitle"]</h2>
            <button id="btnAddNew" class="btn btn-primary" style="font-weight:600;">新增</button>
            <button id="btnBatchDelete" class="btn btn-danger" style="font-weight:600;">作廢</button>
            <button id="btnSearch" class="btn btn-info" style="font-weight:600;">查詢</button>
        </div>
        <span class="order-count">
            共 <span style="font-weight:bold">@Model.TotalCount</span> 筆，
            顯示第 @(((Model.PageNumber - 1) * Model.PageSize) + 1)
            ~ @(Math.Min(Model.PageNumber * Model.PageSize, Model.TotalCount)) 筆
        </span>  
    </div>
    <!-- 查詢條件彈窗 -->
    <div class="modal fade" id="searchModal" tabindex="-1" aria-labelledby="searchModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        @await Html.PartialAsync("_QueryPanelPartial", ViewData["QueryFields"] as List<QueryFieldViewModel>)
    </div>
    </div>

    <div class="table-wrap">
        <table class="table table-hover align-middle text-center">
            <thead>
                <tr id="table-header-row">
                    @foreach (var field in fields)
                    {
                        <th class="sortable" draggable="true" data-field="@field.FieldName" data-serial="@field.SerialNum">
                            @(string.IsNullOrWhiteSpace(field.DisplayLabel) ? field.FieldName : field.DisplayLabel)
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach(var item in items)
                {
                    // 取得 key（如 PaperNum）來組路徑
                    // route 替換
                    var keyValue = item.GetType().GetProperty(keyFieldName)?.GetValue(item, null)?.ToString();
                    var rowUrl = "";
                    if (!string.IsNullOrEmpty(subRouteTemplate) && !string.IsNullOrEmpty(keyValue))
                    {
                        rowUrl = subRouteTemplate.Replace("{PaperNum}", keyValue); // 這邊還是用 {PaperNum} 字串
                    }

                    <tr class="row-link" data-url="@rowUrl" data-paper-num="@keyValue">
                        @foreach (var field in fields)
                        {
                            var keyObj = item.GetType().GetProperty(keyFieldName)?.GetValue(item);
                            var paperKey = keyObj?.ToString();
                            string valStr = "";
                            Dictionary<string, string>? lookupMap = null;
                            string display = "";

                            if (!string.IsNullOrEmpty(paperKey) &&
                                lookupMapData != null &&
                                lookupMapData.TryGetValue(paperKey, out lookupMap) &&
                                lookupMap != null &&
                                lookupMap.TryGetValue(field.FieldName, out display))
                            {
                                valStr = display;
                            }
                            else
                            {
                                var rawValue = item.GetType().GetProperty(field.FieldName)?.GetValue(item, null);
                                if (rawValue != null)
                                {
                                    if (!string.IsNullOrEmpty(field.FormatStr))
                                    {
                                        if (field.DataType?.ToLower() == "date" && rawValue is DateTime dt)
                                        {
                                            valStr = dt.ToString(field.FormatStr); // 例如 yyyy/MM/dd
                                        }
                                        else if (field.DataType?.ToLower() == "number" && rawValue is IFormattable fmt)
                                        {
                                            valStr = fmt.ToString(field.FormatStr, null); // 例如 ###,###,##0.00
                                        }
                                        else
                                        {
                                            valStr = rawValue.ToString();
                                        }
                                    }
                                    else
                                    {
                                        valStr = rawValue.ToString();
                                    }
                                }
                            }
                            
                            <td>@valStr</td>
                        }
                    </tr>

                }
            </tbody>
        </table>
    <div class="pagination-bar">
        @if (paginationVm != null)
        {
            @await Html.PartialAsync("_Pagination", paginationVm)
        }
    </div>
</div>


<!-- 這一行一定要在所有 <script> 之前獨立放，不要包在 <script> 裡！ -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

<script>
    let selectedPaperNum = null;
    const addApiUrl = '@addApiUrl';
    const detailRouteTemplate = '@detailRouteTemplate';

    document.addEventListener("DOMContentLoaded", function () {
        // 點擊行：選取，不跳頁
        document.querySelectorAll(".row-link").forEach(function(row) {
            row.addEventListener("click", function(e) {
                document.querySelectorAll(".row-link.selected").forEach(r => r.classList.remove("selected"));
                row.classList.add("selected");
                selectedPaperNum = row.getAttribute("data-paper-num");
            });

            // 雙擊行：跳單身
            row.addEventListener("dblclick", function() {
                var url = row.getAttribute("data-url");
                if(url) window.location = url;
            });
        });

        // 新增按鈕
        document.getElementById("btnAddNew").addEventListener("click", async function() {
            const result = await Swal.fire({
                title: '確定要新增一張新單據？',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: '確定',
                cancelButtonText: '取消'
            });
            if (!result.isConfirmed) return;

            const resp = await fetch(addApiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({})
            });

            if(resp.ok) {
                const data = await resp.json();
                const paperNum = data.paperNum || data.PaperNum || "";
                if(paperNum) {
                    var jumpUrl = detailRouteTemplate.replace("{PaperNum}", paperNum);
                    window.location = jumpUrl;
                } else {
                    await Swal.fire({ icon: 'success', title: '新增成功，但未取得單號！' });
                    location.reload();
                }
            } else {
                await Swal.fire({ icon: 'error', title: '建立失敗！' });
            }
        });

        // 作廢按鈕
        document.getElementById("btnBatchDelete").addEventListener("click", async function() {
            if (!selectedPaperNum) {
                await Swal.fire({
                    icon: 'warning',
                    title: '請先點選一筆資料',
                    confirmButtonText: '確定'
                });
                return;
            }
            const result = await Swal.fire({
                title: '確定要作廢這筆單據？',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: '確定',
                cancelButtonText: '取消'
            });
            if (!result.isConfirmed) return;

            let resp = await fetch(`/api/SPOdOrderMain/${selectedPaperNum}`, { method: "DELETE" });
            if (resp.ok) {
                await Swal.fire({
                    icon: 'success',
                    title: '作廢成功！'
                });
                location.reload();
            } else {
                let errorMsg = "作廢失敗！";
                try {
                    let result = await resp.json();
                    if (result.error) errorMsg = result.error;
                } catch (e) { }
                await Swal.fire({
                    icon: 'error',
                    title: errorMsg
                });
            }
        });

            // ✅ 拖曳表頭欄位
            const headerRow = document.getElementById("table-header-row");

            if (headerRow) {
           Sortable.create(headerRow, {
                        animation: 150,
                        swap: true,                     // ✅ 使用 swap 模式
                        swapClass: 'highlight',         // ✅ 拖曳時加 highlight 效果
                        ghostClass: 'ghost',            // 可選：拖曳時原位置樣式
                        onEnd: function () {
                            const newOrder = Array.from(headerRow.children).map((th, index) => ({
                                fieldName: th.dataset.field,
                                serialNum: index + 1
                            }));

                            fetch('/api/TableFieldLayout/SaveSerialOrder', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    tableName: 'SPOdOrderMain',
                                    fieldOrders: newOrder
                                })
                            })
                            .then(res => {
                                if (!res.ok) throw new Error("更新失敗");
                                return res.json();
                            })
                            .then(() => {
                                location.reload();
                            })
                            .catch(err => {
                                console.error(err);
                                Swal.fire({ icon: 'error', title: '欄位順序儲存失敗！' });
                            });
                        }
                    });

            }
           // --- 下面是新加的"雙擊表頭欄位排序" ---
            let lastSort = { col: null, asc: true };

            function getCellValue(tr, idx) {
                const cell = tr.children[idx];
                // 數字欄位自動去除逗號
                let val = cell ? cell.textContent.trim().replace(/,/g, '') : '';
                if (val === '') return 0; // 空值視為0
                if (!isNaN(val)) return parseFloat(val); // 若為數字就轉 float
                return val;
            }

            document.querySelectorAll("th.sortable").forEach(function (th, idx) {
                th.addEventListener("dblclick", function () {
                    const table = th.closest('table');
                    const tbody = table.querySelector('tbody');
                    const rows = Array.from(tbody.querySelectorAll('tr'));
                    const colIdx = idx;

                    // 切換正序/反序
                    let asc = true;
                    if (lastSort.col === colIdx) asc = !lastSort.asc;
                    lastSort = { col: colIdx, asc: asc };

                    rows.sort((a, b) => {
                        let aVal = getCellValue(a, colIdx);
                        let bVal = getCellValue(b, colIdx);

                        // 數字/日期排數字，其他欄位用字串
                        if (typeof aVal === "number" && typeof bVal === "number") {
                            return asc ? aVal - bVal : bVal - aVal;
                        }
                        // 字串排序（不區分大小寫）
                        aVal = aVal + '';
                        bVal = bVal + '';
                        return asc ? aVal.localeCompare(bVal, 'zh-Hant') : bVal.localeCompare(aVal, 'zh-Hant');
                    });

                    // 重新插入排序後的 row
                    rows.forEach(tr => tbody.appendChild(tr));
                });
            });

            // 查詢按鈕
            document.getElementById('btnSearch').addEventListener('click', function () {
                var modal = new bootstrap.Modal(document.getElementById('searchModal'));
                modal.show();
            });

              document.getElementById('searchForm').addEventListener('submit', function (e) {
                e.preventDefault();
                const form = this;
                const formData = new FormData(form);
                const paperNum = formData.get("PaperNum") || "";
                const params = new URLSearchParams();
                    params.set("page", "1");
                    params.set("pageSize", "50");
                    params.set("paperNum", paperNum);

                window.location.href = window.location.pathname + "?" + params.toString();
                
                const filters = [];
                for (const [key, value] of formData.entries()) {
                    if (!value) continue;

                    if (key.startsWith("Cond_")) continue;

                    const fieldName = key;
                    const opKey = "Cond_" + fieldName;
                    const opValue = formData.get(opKey) || "Equal";

                    // 確保首字大寫，其他小寫
                    const opEnum = opValue.charAt(0).toUpperCase() + opValue.slice(1).toLowerCase();

                    filters.push({
                        Field: fieldName,
                        Op: opEnum,
                        Value: value
                    });
                }

                // 分頁參數
                filters.push({ Field: "page", Op: "Equal", Value: "1" });
                filters.push({ Field: "pageSize", Op: "Equal", Value: "50" });

                fetch('/api/SPOdOrderMain/pagedQuery', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ filters })
                })
                .then(res => {
                    if (!res.ok) throw new Error("查詢失敗");
                    return res.json();
                })
                .then(data => {
                    console.log("查詢結果", data);
                    location.reload();  // 簡單重新載入
                })
                .catch(err => {
                    console.error(err);
                    alert("查詢發生錯誤");
                });
            });
    });

    window.addEventListener('pageshow', function (event) {
        if (event.persisted || (window.performance && window.performance.getEntriesByType("navigation")[0]?.type === "back_forward")) {
            location.reload();
        }
    });


</script>

