@using PcbErpApi.Models
@model dynamic

@{
    var fields = ViewData["Fields"] as List<TableFieldViewModel>;
    if (fields == null) { <text>查無欄位設定</text>; return; }
    var items = Model.Items;
    var totalCount = Model.TotalCount;
    var pageNumber = Model.PageNumber;
    var pageSize = Model.PageSize;
    var subRouteTemplate = ViewData["SubRouteTemplate"] as string ?? "";
    var paginationVm = ViewData["PaginationVm"] as PaginationModel;

    // 新增API路徑與單身頁路徑，從 ViewData 傳（預設值也可寫死）
    var addApiUrl = ViewData["AddApiUrl"] as string ?? "/api/SPOdOrderMain";
    var detailRouteTemplate = ViewData["SubRouteTemplate"] as string ?? "/SpodOrderSubs/{PaperNum}";
    var lookupMapData = ViewData["LookupDisplayMap"] as Dictionary<string, Dictionary<string, string>>;
    var keyFieldName = ViewData["KeyFieldName"]?.ToString() ?? "PaperNum";
    var tableName = ViewData["DictTableName"]?.ToString() ?? "SPOdOrderMain";
}
<script>
    window._tableName = "@tableName";
    window._tableFields = @Html.Raw(Json.Serialize(fields));
    window._lookupMapData = @Html.Raw(Json.Serialize(lookupMapData ?? new Dictionary<string, Dictionary<string, string>>()));
    window._keyFieldName = "@keyFieldName";
    window._detailRouteTemplate = "@detailRouteTemplate";
</script>

<style>
    body { background: #f7f9fb; }
    .container { max-width: 1100px; }
    .title-row { display: flex; justify-content: space-between; align-items: flex-end; }
    .order-count { font-size: 1rem; color: #666; margin-bottom: 6px; }
    .table { box-shadow: 0 2px 12px 0 #c3d4e6; border-radius: 16px; overflow: hidden; background: #fff; }
    .table th, .table td { vertical-align: middle !important; white-space: nowrap; font-size: 1rem; border: none; }
    .table th {
        background: linear-gradient(90deg, #e8f2fe 0%, #f3f8ff 100%);
        color: #2056ac; letter-spacing: 2px; font-weight: 600;
        border-bottom: 2px solid #bdd2f7; padding: 14px 10px;
    }
    .table tbody tr { transition: background .15s; }
    .table tbody tr:hover { background: #f0f8ff !important; }
    .table td { border-top: 1px solid #f0f3f7 !important; padding: 11px 10px; }
    .status-done { color: #29963b; background: #e5f7e6; border-radius: 8px; padding: 2px 10px; font-weight: bold; letter-spacing: 1px; font-size: 1.05em;}
    .status-pending { color: #c88400; background: #fff9e3; border-radius: 8px; padding: 2px 10px; font-weight: bold; letter-spacing: 1px; font-size: 1.05em;}
    .row-link { cursor: pointer; }
    .pagination-bar { margin: 20px 0 30px 0; }
    .pagination .page-link { color: #3a72d9; border-radius: 6px !important; margin: 0 2px; }
    .pagination .page-item.active .page-link { background: #3a72d9; color: #fff; border: none; }
    .pagination .page-item.disabled .page-link { color: #aaa; pointer-events: none; background: #f1f4f8; }
    .table-wrap {
        max-width: 100%;            /* 不會超過container寬 */
        overflow-x: auto;           /* 超過寬度自動出現橫向捲軸 */
        margin: 0 auto;             /* 水平置中 */
        background: #fff;           /* 可視需求 */
        border-radius: 16px;
        box-shadow: 0 2px 12px 0 #c3d4e6;
    }
    .table {
        min-width: 1200px;          /* 最小寬，根據欄位數量調整 */
        margin-bottom: 0;
    }
    tr.selected td, tr.selected:hover td {
        background-color: #ffe6e6 !important;
    }
    .highlight {
        background-color: #ffd !important;
    }
    .ghost {
        opacity: 0.5;
    }
    #search-panel {
    background: #f8fafb;
    border-radius: 10px;
    padding: 14px 18px;
    margin-top: 12px;
    margin-bottom: 18px;
    box-shadow: 0 2px 6px 0 #e2e8f0;
    }
    #search-panel label {
        margin-bottom: 2px;
        font-size: 0.93em;
        color: #286bb5;
    }
    .table-hscroll-proxy{
    position: sticky;     /* 黏在視窗頂端 */
    top: 0;               /* 如果上面有固定工具列，改成相對高度 */
    z-index: 100;         /* 比表頭更高，避免被蓋住 */
    background: #fff;     /* 看起來乾淨 */
    }

    .hscroll-track{
    height: 14px;
    overflow-x: auto;
    overflow-y: hidden;
    scrollbar-gutter: stable both-edges; /* 留出滾動條空間，避免忽隱忽現 */
    border-bottom: 1px solid #eaeef4;
    }

    .hscroll-spacer{ height: 1px; }  /* 只負責撐寬度 */



</style>

<div class="container my-5">
    <div class="title-row mb-4 border-bottom pb-2">
        <div style="display:flex;align-items:center;gap:16px;">
            <h2 class="mb-0 text-primary" style="font-weight:700;letter-spacing:3px;">@ViewData["TableTitle"]</h2>
            @await Html.PartialAsync("_TableToolbar", new TableToolbarModel {
                SearchBtnId = "btnSearch",
                AddBtnId = "btnAddNew",
                DeleteBtnId = "btnBatchDelete",
                QueryFields = ViewData["QueryFields"] as List<QueryFieldViewModel>,
                ModalId = "searchModal",
                ReportSpName = ViewData["ReportSpName"]?.ToString() ?? ""   // 👈 從外層再傳進來
            })
        </div>
        <span class="order-count" id="orderCountInfo">
            共 <span style="font-weight:bold">@Model.TotalCount</span> 筆，
            顯示第 @(((Model.PageNumber - 1) * Model.PageSize) + 1)
            ~ @(Math.Min(Model.PageNumber * Model.PageSize, Model.TotalCount)) 筆
        </span>
    </div>

    <!-- 頂端同步卷軸（放在 table-wrap 外面） -->
    <div class="table-hscroll-proxy" id="tableHScrollTop">
    <div class="hscroll-track" id="hscrollTop">
        <div class="hscroll-spacer" id="hscrollSpacer"></div>
    </div>
    </div>

    <div class="table-wrap">
        <table class="table table-hover align-middle text-center">
            <thead>
                <tr id="table-header-row">
                    @foreach (var field in fields)
                    {
                        <th class="sortable" draggable="true" data-field="@field.FieldName" data-serial="@field.SerialNum">
                            @(string.IsNullOrWhiteSpace(field.DisplayLabel) ? field.FieldName : field.DisplayLabel)
                        </th>
                    }
                </tr>
            </thead>
            <tbody id="dataTbody"></tbody>
                <!-- 資料由 JS 動態產生 -->
            </tbody>
        </table>
    <div class="pagination-bar" id="paginationBar"> 
        <!-- 資料由 JS 動態產生 -->
        @if (paginationVm != null) { @await Html.PartialAsync("_Pagination", paginationVm) }
    </div>
</div>


<!-- 這一行一定要在所有 <script> 之前獨立放，不要包在 <script> 裡！ -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script src="~/js/toolbarHandler.js"></script>

<script>
/* ========= 1) 全域變數與常用函式：先宣告，避免 ReferenceError ========= */

let selectedPaperNum = null;
const addApiUrl = '@addApiUrl';
const detailRouteTemplate = '@detailRouteTemplate';
// 有 busyFetch 就用它，否則退回 fetch
const http = (url, init, msg) =>
  (window.busyFetch ? window.busyFetch(url, init, msg) : fetch(url, init));

function saveQueryState(filters, pageNumber) {
  localStorage.setItem("orderListQueryFilters", JSON.stringify(filters));
  localStorage.setItem("orderListPageNumber", String(pageNumber));
}
function loadQueryState() {
  const filtersStr = localStorage.getItem("orderListQueryFilters");
  const pageStr = localStorage.getItem("orderListPageNumber");
  return {
    filters: filtersStr ? JSON.parse(filtersStr) : null,
    pageNumber: pageStr ? parseInt(pageStr) : null
  };
}

// 這個必須放很前面，供 ToolbarHandler 與回填使用
const DATE_RE = /^\d{4}-\d{2}-\d{2}$/;

function looksLikeDateField(el) {
  const t  = (el?.getAttribute('type') || '').toLowerCase();
  const n  = (el?.name || '').toLowerCase();
  const df = (el?.dataset?.field || '').toLowerCase();
  const ph = (el?.placeholder || '').toLowerCase();
  return t === 'date' || n.includes('date') || df.includes('date') || ph.includes('yyyy');
}

function normalizeForInput(el, val) {
  if (val == null) return val;
  let s = String(val).trim();
  if (!looksLikeDateField(el)) return s;

  if (/^\d{4}\/\d{2}\/\d{2}$/.test(s)) return s.replace(/\//g, '-');            // 2025/08/01
  if (/^\d{8}$/.test(s))               return s.slice(0,4)+'-'+s.slice(4,6)+'-'+s.slice(6); // 20250801
  if (/^\d{4}-\d{2}-\d{2}/.test(s))    return s.slice(0,10);                    // 2025-08-01T...
  return s;
}

const needDrop = v => typeof v === 'string' && /select\s|\bgetdate\b|\bdateadd\b/i.test(v);

// 先宣告，後面會賦值
let lastQueryFilters = [];

// CSS.escape polyfill（保險）
if (typeof CSS === 'undefined' || typeof CSS.escape !== 'function') {
  window.CSS = window.CSS || {};
  CSS.escape = s => String(s).replace(/([^\w-])/g, '\\$1');
}

/* ========= 2) 還原查詢條件（安全版） ========= */
function restoreSearchFormSafe(formEl, saved) {
  if (!formEl) return;
  try { if (typeof saved === 'string') saved = JSON.parse(saved); } catch { saved = null; }
  if (!Array.isArray(saved) || !saved.length) return;

  // 同時建立兩種索引：byKey 與 byField[陣列]
  const byKey = Object.create(null);
  const byField = Object.create(null);
  saved.forEach(f => {
    if (!f) return;
    if (f.Key) byKey[f.Key] = f;
    const fld = f.Field || '';
    if (!byField[fld]) byField[fld] = [];
    byField[fld].push(f);
  });

  const valueEls = Array.from(
    formEl.querySelectorAll('[name]:not([name^="Cond_"]):not([type="hidden"])')
  );

  const namePos = Object.create(null);
  valueEls.forEach(el => {
    const name = el.name;
    if (!name || name === '__RequestVerificationToken') return;

    const idx = namePos[name] = (namePos[name] ?? 0);
    namePos[name]++;

    // 命中順序
    let hit =
      byKey[`${name}#${idx}`] ||
      (byField[name] && byField[name][idx]) ||
      (el.dataset.field && byField[el.dataset.field] && byField[el.dataset.field][idx]) ||
      (byField[name] && byField[name][0]);

    if (!hit) return;

    const v = normalizeForDateInput(el, hit.Value);
    if (el.type === 'date') {
      if (DATE_RE.test(String(v))) el.value = v; // 僅接受 yyyy-MM-dd
    } else {
      if (v != null) el.value = v;
    }

    // 回填同 index 的運算子
    const condList = formEl.querySelectorAll(`[name="${CSS.escape('Cond_' + name)}"]`);
    if (condList && condList.length > idx && hit.Op != null) {
      condList[idx].value = hit.Op;
    }
  });
}

/* ========= 3) 表格繪製/換頁 ========= */
function renderTable(data) {
  const tbody = document.getElementById('dataTbody');
  tbody.innerHTML = "";

  const fields = window._tableFields;
  const lookupMapData = window._lookupMapData;
  const keyFieldName = window._keyFieldName;
  const subRouteTemplate = "@(detailRouteTemplate)";

  data.forEach(item => {
    const keyValue = item[keyFieldName] || "";
    let rowUrl = "";
    if (subRouteTemplate && keyValue) rowUrl = subRouteTemplate.replace("{PaperNum}", keyValue);

    const tr = document.createElement('tr');
    tr.className = "row-link";
    tr.setAttribute('data-url', rowUrl);
    tr.setAttribute('data-paper-num', keyValue);

    fields.forEach(field => {
      let valStr = "";
      if (keyValue && lookupMapData?.[keyValue]?.[field.FieldName]) {
        valStr = lookupMapData[keyValue][field.FieldName];
      } else {
        let raw = item[field.FieldName];
        const dt = (field.DataType || "").toLowerCase();
        if (raw == null) valStr = "";
        else if (typeof raw === "string") valStr = raw;
        else if (dt === "number" && typeof raw === "number") valStr = raw.toLocaleString();
        else valStr = String(raw);
      }
      const td = document.createElement('td');
      td.innerHTML = valStr ?? "";
      tr.appendChild(td);
    });

    tbody.appendChild(tr);
  });

  highlightLastViewedRow();

  document.querySelectorAll(".row-link").forEach(row => {
    row.addEventListener("click", () => {
      document.querySelectorAll(".row-link.selected").forEach(r => r.classList.remove("selected"));
      row.classList.add("selected");
      window.selectedPaperNum = row.getAttribute("data-paper-num");
    });
    row.addEventListener("dblclick", () => {
      const url = row.getAttribute("data-url");
      if (url) window.location = url;
    });
  });

  if (window.refreshHScrollWidth) window.refreshHScrollWidth();
}

function renderPagination(totalCount, pageSize, pageNumber) {
  const totalPages = Math.ceil(totalCount / pageSize);
  if (totalPages <= 1) { document.getElementById("paginationBar").innerHTML = ""; return; }

  let html = '<nav><ul class="pagination justify-content-center">';
  html += `<li class="page-item ${pageNumber === 1 ? "disabled" : ""}">
            <a class="page-link" href="#" data-page="${pageNumber - 1}">上一頁</a></li>`;

  let start = Math.max(1, pageNumber - 2);
  let end   = Math.min(totalPages, pageNumber + 2);

  if (start > 2) {
    html += `<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`;
    html += `<li class="page-item"><a class="page-link" href="#" data-page="2">2</a></li>`;
    html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
  } else {
    for (let i = 1; i < start; i++) {
      html += `<li class="page-item"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
    }
  }

  for (let i = start; i <= end; i++) {
    html += `<li class="page-item ${i === pageNumber ? "active" : ""}">
              <a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
  }

  if (end < totalPages - 2) {
    html += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
    html += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages - 1}">${totalPages - 1}</a></li>`;
    html += `<li class="page-item"><a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a></li>`;
  } else {
    for (let i = end + 1; i <= totalPages; i++) {
      html += `<li class="page-item"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
    }
  }

  html += `<li class="page-item ${pageNumber === totalPages ? "disabled" : ""}">
            <a class="page-link" href="#" data-page="${pageNumber + 1}">下一頁</a></li>`;
  html += '</ul></nav>';

  document.getElementById("paginationBar").innerHTML = html;

  document.querySelectorAll('#paginationBar a[data-page]').forEach(a => {
    a.addEventListener('click', e => {
      e.preventDefault();
      const targetPage = parseInt(a.getAttribute('data-page'));
      if (!isNaN(targetPage) && targetPage > 0) doQuery(targetPage);
    });
  });
}

function renderOrderCount(totalCount, pageSize, pageNumber) {
  const start = (pageNumber - 1) * pageSize + 1;
  const end   = Math.min(pageNumber * pageSize, totalCount);
  document.getElementById('orderCountInfo').innerHTML =
    `共 <span style="font-weight:bold">${totalCount}</span> 筆，顯示第 ${start} ~ ${end} 筆`;
}

function doQuery(page = 1) {
  let filters = lastQueryFilters.slice();
  let hasPage = false, hasSize = false;

  filters.forEach(f => {
    if (f.Field === "page")     { f.Value = String(page); hasPage = true; }
    if (f.Field === "pageSize") { f.Value = "@Model.PageSize"; hasSize = true; }
  });
  if (!hasPage) filters.push({ Field: "page", Op: "", Value: String(page) });
  if (!hasSize) filters.push({ Field: "pageSize", Op: "", Value: "@Model.PageSize" });

  saveQueryState(filters, page);

  http('/api/PagedQuery/PagedQuery', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ table: window._tableName, filters })
  }, '讀取資料中…')
    .then(r => r.json())
    .then(result => {
      window._lookupMapData = result.lookupMapData;
      renderTable(result.data);
      renderPagination(result.totalCount, @Model.PageSize, page);
      renderOrderCount(result.totalCount, @Model.PageSize, page);
    })
    .catch(err => Swal.fire({ icon:'error', title:'查詢失敗', text: String(err) }));

}

function highlightLastViewedRow() {
  const lastPaperNum = localStorage.getItem("lastViewedPaperNum");
  if (!lastPaperNum) return;
  const tr = document.querySelector(`tr[data-paper-num="${lastPaperNum}"]`);
  if (tr) {
    tr.classList.add('selected');
    window.selectedPaperNum = lastPaperNum;
    tr.scrollIntoView({ behavior: "smooth", block: "center" });
  }
  localStorage.removeItem("lastViewedPaperNum");
}

/* ========= 4) DOMContentLoaded：初始化、清理舊資料、回填、第一次查詢 ========= */

document.addEventListener("DOMContentLoaded", function () {
  // 建立 ToolbarHandler
  new ToolbarHandler({
    searchBtnId: "btnSearch",
    addBtnId: "btnAddNew",
    deleteBtnId: "btnBatchDelete",
    getSelectedId: () => {
      const selectedRow = document.querySelector("#dataTbody tr.selected");
      return selectedRow ? selectedRow.getAttribute("data-paper-num") : null;
    },
    modalId: "searchModal",
    formId: "searchForm",
    addApiUrl: "@addApiUrl",
    deleteApiUrlFn: (id) => `/api/${"@tableName"}/${id}`,
    detailRouteTemplate: "@(detailRouteTemplate)",
    tableName: "@tableName",
    pageSize: 50,
    renderTable,
    renderPagination,
    renderOrderCount,
    restoreSearchForm: restoreSearchFormSafe,
    queryRedirectUrl: "/@tableName"
  });

  const form = document.getElementById('searchForm');
    form?.addEventListener('submit', () => {
    const formSel = '#searchForm';
    const filters = [];
    const valueEls = Array.from(
        document.querySelectorAll(`${formSel} [name]:not([name^="Cond_"]):not([type="hidden"])`)
    );
    const namePos = Object.create(null);

    valueEls.forEach(el => {
        const name = el.name;
        if (!name || name === '__RequestVerificationToken') return;

        const idx = namePos[name] = (namePos[name] ?? 0);
        namePos[name]++;

        let val = normalizeForInput(el, el.value);
        if (val == null || val === '') return;

        const condList = document.querySelectorAll(`${formSel} [name="${CSS.escape('Cond_' + name)}"]`);
        const op = (condList && condList.length > idx) ? (condList[idx].value || '') : '';

        filters.push({
        Key: `${name}#${idx}`,
        Field: el.dataset.field || name,
        Op: op,
        Value: val
        });
    });

    // 分頁重置
    filters.push({ Field: 'page', Op: '', Value: '1' });
    filters.push({ Field: 'pageSize', Op: '', Value: String(@Model.PageSize) });

    lastQueryFilters = filters.slice();
    saveQueryState(lastQueryFilters, 1);
    });

  // 打開 Modal 後再回填一次，避免 UI 元件覆蓋
  document.getElementById('searchModal')
    ?.addEventListener('shown.bs.modal', () => {
      const formEl = document.getElementById('searchForm');
      const saved = JSON.parse(localStorage.getItem('orderListQueryFilters') || '[]');
      if (formEl && Array.isArray(saved) && saved.length) restoreSearchFormSafe(formEl, saved);
    });

  // 拖曳表頭（可留可去）
  const headerRow = document.getElementById("table-header-row");
  if (headerRow && window.Sortable) {
    Sortable.create(headerRow, {
      animation: 150,
      swap: true,
      swapClass: 'highlight',
      ghostClass: 'ghost',
      onEnd: function () {
        const newOrder = Array.from(headerRow.children).map((th, index) => ({
          fieldName: th.dataset.field, serialNum: index + 1
        }));
        http('/api/TableFieldLayout/SaveSerialOrder', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ tableName: window._tableName, fieldOrders: newOrder })
        }, '儲存欄位順序…')
          .then(res => { if (!res.ok) throw new Error("更新失敗"); return res.json(); })
          .then(() => location.reload())
          .catch(() => Swal.fire({ icon: 'error', title: '欄位順序儲存失敗！' }));
      }
    });
  }

  // 清理/正規化 localStorage 的舊條件並回填 + 首次查詢
  const state = loadQueryState();
  const formEl = document.getElementById('searchForm');
  const cleaned = (state.filters || [])
    .filter(f => {
      if (!f) return false;
      const isDate = /date/i.test(String(f.Field || ''));
      return !(isDate && needDrop(f.Value)); // 移除看起來像 SQL 的日期值
    })
    .map(f => {
      if (/date/i.test(String(f.Field || ''))) {
        f.Value = normalizeForDateInput({ type: 'date' }, f.Value);
      }
      return f;
    });

  if (cleaned.length) {
    lastQueryFilters = cleaned;
    restoreSearchFormSafe(formEl, cleaned);
    doQuery(state.pageNumber || 1);
  } else {
    renderTable(@Html.Raw(Json.Serialize(Model.Items)));
  }

  // 切換（檢查是否允許修改）
  document.getElementById('btnViewEditToggle')?.addEventListener('click', () => {
    const id = window.selectedPaperNum;
    if (!id) return Swal.fire({ icon: 'warning', title: '請先選擇一筆單據' });

    const row = document.querySelector(`tr[data-paper-num="${id}"]`);
    const status = row?.querySelector("td:nth-child(6)")?.textContent.trim() || '';
    if (window.BLOCK_STATUSES?.includes(status)) {
      return Swal.fire({ icon: 'warning', title: '無法修改', text: `此單據狀態為「${status}」，不可進行修改。` });
    }
    const url = detailRouteTemplate.replace("{PaperNum}", id);
    window.location.href = url;
  });
});

/* ========= 5) 同步頂端水平捲軸 ========= */
(function initTopHScroll(){
  const wrap   = document.querySelector('.table-wrap');
  if (!wrap) return;
  const table  = wrap.querySelector('table');
  const topBar = document.getElementById('hscrollTop');
  const spacer = topBar?.querySelector('.hscroll-spacer');
  if (!table || !topBar || !spacer) return;

  function measure(){
    spacer.style.width = table.scrollWidth + 'px';
    topBar.scrollLeft = wrap.scrollLeft;
  }
  let syncing = false;
  topBar.addEventListener('scroll', () => {
    if (syncing) return; syncing = true; wrap.scrollLeft = topBar.scrollLeft; syncing = false;
  });
  wrap.addEventListener('scroll', () => {
    if (syncing) return; syncing = true; topBar.scrollLeft = wrap.scrollLeft; syncing = false;
  });
  window.addEventListener('resize', measure);
  window.refreshHScrollWidth = measure;
  measure();
})();
</script>


