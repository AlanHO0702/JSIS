@model dynamic
@using PcbErpApi.Helpers
@using System.Text.Json
@{
    // ÂñÆÈ†≠Ê¨Ñ‰Ωç
    var headerFields = Model.HeaderTableFields; // ÂèØË¶ñÊ¨Ñ‰Ωç
    var headerData = Model.HeaderData; // ÂñÆÈ†≠Ë≥áÊñô (Dictionary<string, object> Êàñ‰Ω†ÁöÑÂñÆÈ†≠Model)
    // ÂñÆË∫´
    var fields = Model.TableFields;
    var items = Model.Items;
    var tableTitle = ViewData["TableTitle"] as string ?? "";
    var showRowNumber = ViewData["ShowRowNumber"] as bool? ?? true;
    var headerFieldsList = ((IEnumerable<TableFieldViewModel>)Model.HeaderTableFields).ToList();
    var addApiUrl = ViewData["AddApiUrl"]?.ToString() ?? "";
    var detailRouteTemplate = ViewData["SubRouteTemplate"]?.ToString() ?? "";
    var tableName = ViewData["DictTableName"]?.ToString() ?? "";
    var keyFieldName = ViewData["KeyFieldName"]?.ToString() ?? "PaperNum";
    var queryRedirectUrl = ViewData["QueryRedirectUrl"]?.ToString() ?? "";
    var DeleteApiUrl = ViewData["DeleteApiUrl"]?.ToString() ?? "";
    

    var groupedTabs = headerFieldsList
        .Where(f => (f.iShowWhere ?? 1) > 0) // ‚ûú ÈÅéÊøæÊéâ iShowWhere ÁÇ∫ 0 ÁöÑÊ¨Ñ‰Ωç
        .GroupBy(f => f.iShowWhere ?? 1)
        .OrderBy(g => g.Key)
        .ToDictionary(g => g.Key, g => g.ToList());

    var lookupMap = ViewData["LookupDisplayMap"] as Dictionary<string, Dictionary<string, string>>;

    var PaperNum = headerData.ContainsKey("PaperNum") ? headerData["PaperNum"]?.ToString() ?? "" : "";

    var headerLookupMap = ViewData["HeaderLookupMap"] as Dictionary<string, string>;

}

<div class="erp-detail-container">
    <div class="d-flex align-items-center mb-4" style="gap:0px;">
        <h2 class="erp-title mb-0" style="font-size:2em;margin-bottom:0;padding-bottom:0;line-height:1.2;display:flex;align-items:center;">
            @tableTitle
        </h2>
        <div style="ms-2">
            @await Html.PartialAsync("_TableToolbar", new TableToolbarModel {
                SearchBtnId = "btnSubSearch",
                AddBtnId = "btnSubAddNew",
                DeleteBtnId = "btnSubBatchDelete",
                QueryFields = ViewData["QueryFields"] as List<QueryFieldViewModel>,
                ModalId = "searchModal",
                ReportSpName = ViewData["ReportSpName"]?.ToString() ?? ""   // üëà ÂæûÂ§ñÂ±§ÂÜçÂÇ≥ÈÄ≤‰æÜ
            })
        </div>
    </div>

        <!-- ÂñÆÈ†≠ÂèØÁ∑®ËºØË°®ÂñÆ -->
        <form id="orderHeaderForm" class="erp-header-form mb-4">
        <div class="row">
            <!-- ‚úÖ Tabs ÂàáÊèõÂàó -->
            <ul class="nav nav-tabs" id="headerTabs" role="tablist">
                @foreach (var tab in groupedTabs.Keys)
                {
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(tab == 1 ? "active" : "")"
                                id="tab-@tab-tab"
                                data-bs-toggle="tab"
                                data-bs-target="#tab-@tab"
                                type="button" role="tab">
                            ÂàÜÈ†Å @tab
                        </button>
                    </li>
                }
            </ul>

                <!-- ‚úÖ Tabs Â∞çÊáâÂÖßÂÆπ -->
              <div class="tab-content" id="headerTabContent">
                    @foreach (var tab in groupedTabs)
                    {
                        <div class="tab-pane fade @(tab.Key == 1 ? "show active" : "")"
                            id="tab-@tab.Key" role="tabpanel">
                            <ul class="list-unstyled header-fields-tab"
                                data-tab-index="@tab.Key"
                                style="position: relative">
                               @foreach (var field in tab.Value)
                                {
                                    object rawValue = null;
                                    headerData?.TryGetValue(field.FieldName, out rawValue);
                                    string displayText = "";

                                    // 1. lookup ÂÑ™ÂÖàÈ°ØÁ§∫
                                    if (headerLookupMap != null && headerLookupMap.TryGetValue(field.FieldName, out var lookupVal))
                                    {
                                        displayText = lookupVal;
                                    }
                                    else if (rawValue != null)
                                    {
                                        if (!string.IsNullOrEmpty(field.FormatStr))
                                        {
                                            // Êó•ÊúüÊ†ºÂºè
                                            if (field.DataType?.ToLower() == "date" && rawValue is DateTime dt)
                                            {
                                                // nn ËΩâ mm
                                                displayText = dt.ToString(field.FormatStr.Replace("nn", "mm"));
                                            }
                                            // Êï∏Â≠óÊ†ºÂºè
                                            else if (field.DataType?.ToLower() == "number" && rawValue is IFormattable fmt)
                                            {
                                                displayText = fmt.ToString(field.FormatStr, null);
                                            }
                                            else
                                            {
                                                displayText = rawValue.ToString();
                                            }
                                        }
                                        else
                                        {
                                            displayText = rawValue.ToString();
                                        }

                                        // ‚úÖ ÈÄôË£°Ë£úÔºöÊï∏ÂÄºÂûãËã•ÁÇ∫Á©∫ÔºåÈ°ØÁ§∫ 0
                                        if (string.IsNullOrWhiteSpace(displayText) && field.DataType?.ToLower() == "number")
                                        {
                                            displayText = "0";
                                        }
                                    }

                                    var top = field.iFieldTop ?? 0;
                                    var left = field.iFieldLeft ?? 0;
                                    var width = field.iFieldWidth ?? 160;
                                    var height = field.iFieldHeight ?? 44;

                                    var liClass = "draggable-field inline"; // Ê∞∏ÈÅ†Ê©´Êéí


                                     // Âà§Êñ∑Êúâ lookup table Ë®≠ÂÆö
                                    if (!string.IsNullOrWhiteSpace(field.LookupTable) &&
                                        !string.IsNullOrWhiteSpace(field.LookupKeyField) &&
                                        !string.IsNullOrWhiteSpace(field.LookupResultField))
                                    {
                                        // ‰∏ãÊãâÈÅ∏ÂñÆÂÖÉ‰ª∂ÔºàÁî® selectÔºâ
                                        <li class="@liClass"
                                            data-field="@field.FieldName"
                                            data-tab="@tab.Key"
                                            style="top:@(field.iFieldTop ?? 0)px; left:@(field.iFieldLeft ?? 0)px; width:@(field.iFieldWidth ?? 160)px; height:@(field.iFieldHeight ?? 44)px;">
                                            <label>@field.DisplayLabel</label>
                                            <select class="form-select lookup-dropdown"
                                                    name="@field.FieldName"
                                                    data-table="@field.LookupTable"
                                                    data-key="@field.LookupKeyField"
                                                    data-result="@field.LookupResultField.Replace(" ", "")"
                                                    data-selected="@rawValue"> 
                                                <option value="">--Ë´ãÈÅ∏Êìá--</option>
                                            </select>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="@liClass"
                                            data-field="@field.FieldName"
                                            data-tab="@tab.Key"
                                            style="top:@(top)px; left:@(left)px; width:@(width)px; height:@(height)px;">
                                            <label>@field.DisplayLabel</label>
                                            <textarea class="form-control resizable-input"
                                                    name="@field.FieldName">@displayText</textarea>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    }
                </div>
        </div>
        <button type="submit" class="btn btn-primary">ÂÑ≤Â≠òÂñÆÈ†≠</button>
    </form>
    <!-- ÂñÆË∫´ÊòéÁ¥∞ table -->
    <div class="erp-table-wrapper">
        <table class="erp-table">
            <thead>
                <tr>
                    @foreach(var col in fields)
                    {
                        <th>@col.DisplayLabel</th>
                    }
                </tr>
            </thead>
            <tbody>
                    @if (items != null)
                    {
                        var index = 1;
                        foreach (var item in items)
                        {
                            <tr>
                                @foreach(var col in fields)
                                {
                                    object v = "";
                                    if (item is IDictionary<string, object> dict)
                                        dict.TryGetValue(col.FieldName, out v);
                                    else if (item is System.Dynamic.ExpandoObject exp)
                                    {
                                        var expDict = (IDictionary<string, object>)exp;
                                        expDict.TryGetValue(col.FieldName, out v);
                                    }
                                    else
                                    {
                                        var prop = item.GetType().GetProperty(col.FieldName);
                                        v = prop != null ? prop.GetValue(item, null) : "";
                                    }
                                    // lookup display
                                    var paperNum = item.GetType().GetProperty("PaperNum")?.GetValue(item, null)?.ToString();
                                    var itemNo = item.GetType().GetProperty("Item")?.GetValue(item, null)?.ToString();
                                    var rowKey = $"{paperNum}_{itemNo}";
                                    string display = null;
                                    if (lookupMap != null && lookupMap.TryGetValue(rowKey, out var dict2))
                                    {
                                        dict2.TryGetValue(col.FieldName, out display);
                                    }
                                    <td>
                                        @(display ?? (v is DateTime dt ? dt.ToString("yyyy/MM/dd") : v?.ToString()))
                                    </td>
                                }
                            </tr>
                            index++;
                        }
                    }
                    </tbody>
        </table>
    </div>
</div>
<!-- SweetAlert2 forÊèêÁ§∫ -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
<script src="~/js/toolbarHandler.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css" />
<script>
    const paperNum = "@PaperNum";
    const QueryRedirectUrl = "@(ViewData["QueryRedirectUrl"])";
    window.selectedPaperNum = '@(Model.HeaderData["PaperNum"] ?? "")';

    // Áî®ÂÖ±Áî® ToolbarHandler class
    new ToolbarHandler({
        searchBtnId: "btnSubSearch",
        addBtnId: "btnSubAddNew",
        deleteBtnId: "btnSubBatchDelete",
        getSelectedId: () => paperNum,  // ÂñÆË∫´È†ÅÂõ∫ÂÆöÂÇ≥ÂñÆËôü
        modalId: "searchModal",
        formId: "searchForm",
        addApiUrl: "@addApiUrl",  
        deleteApiUrlFn: id => `/api/@DeleteApiUrl/${id || paperNum}`,
        detailRouteTemplate: "@detailRouteTemplate",  
        tableName: "@tableName",  
        renderTable: null,
        renderPagination: null,
        renderOrderCount: null,
        restoreSearchForm: null,
        queryRedirectUrl: QueryRedirectUrl   // üëà ‰∏ÄÂÆöË¶ÅÂåÖÊàêÂ≠ó‰∏≤
    });


    document.getElementById('orderHeaderForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const formData = Object.fromEntries(new FormData(this));
        // ‰Ω†Ëá™Â∑±ÁöÑÂÑ≤Â≠òAPIË∑ØÂæë
        const resp = await fetch('/api/OrderHeaderApi/SaveOrderHeader', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });
        if(resp.ok) {
            Swal.fire({ icon: 'success', title: 'ÂÑ≤Â≠òÊàêÂäüÔºÅ' });
        } else {
            let msg = 'ÂÑ≤Â≠òÂ§±Êïó';
            try {
                let result = await resp.json();
                if (result.error) msg = result.error;
            } catch {}
            Swal.fire({ icon: 'error', title: msg });
        }
    });

    $(function () {
        let debounceTimer;

        function debounceSave() {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(saveLayoutChanges, 400);
        }

        function saveLayoutChanges() {
            const layout = [];

            // ‚úÖ Êö´ÊôÇÈ°ØÁ§∫ÊâÄÊúâ tab-pane
            const hiddenTabs = $(".tab-pane").not(".show");
            hiddenTabs.addClass("temporary-show").addClass("show").css("display", "block");

            $(".draggable-field").each(function () {
                const $li = $(this);
                const field = $li.data("field");
                const tabIndex = parseInt($li.attr("data-tab")) || 1;

                layout.push({
                    fieldName: field,
                    top: Math.round($li.position().top),
                    left: Math.round($li.position().left),
                    width: Math.round($li.outerWidth()),
                    height: Math.round($li.outerHeight()),
                    ishowWhere: tabIndex
                });
            });

            // ‚úÖ ÈÇÑÂéü tab-pane ÁãÄÊÖã
            hiddenTabs.removeClass("show").removeClass("temporary-show").css("display", "");

            if (layout.length === 0) return;

            fetch("/api/TableFieldLayout/SaveHeaderLayout", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    tableName: "@Model.HeaderTableName".toLowerCase(),
                    layoutUpdates: layout
                })
            }).catch(err => console.error("ÂÑ≤Â≠òÂ§±Êïó", err));     
        }

        $(".draggable-field").each(function () {
            const $li = $(this);

            $li.draggable({
                handle: "label",
                helper: function () {
                    return $("<div>")
                        .text($(this).find("label").text())
                        .css({
                            width: "80px",   
                            height: $li.outerHeight() + "px", // Ë∑üÊ¨Ñ‰Ωç‰∏ÄÊ®£È´ò
                            background: "#eef",
                            border: "1px dashed #999",
                            padding: "4px",
                            "font-size": "0.9em"
                        });
                },
                appendTo: "body",
                zIndex: 10000,
                start: function () {
                    $(this).hide(); // ‚úÖ ÊãñÊõ≥ÊôÇÂéüÊú¨Èö±ËóèÔºåÈÅøÂÖçÊ∑∑Ê∑Ü
                },
                stop: function () {
                    $(this).show();
                }
            });

            $li.resizable({
                handles: "se",
                minWidth: 50,
                minHeight: 30,
                stop: debounceSave
            });
        });

        $(".header-fields-tab").droppable({
            accept: ".draggable-field",
            tolerance: "pointer", //intersectÊòØË¶ÅÁâ©‰ª∂‰∏≠ÂøÉÈªûÊãñÂà∞ÊâçÊúÉËß∏ÁôºÔºåÊîπÊàêÊ∏∏Ê®ôËß∏Á¢∞
            over: function () {
                $(this).addClass("drop-hover");
            },
            out: function () {
                $(this).removeClass("drop-hover");
            },     
            drop: function (event, ui) {
                $(this).removeClass("drop-hover");
                const $dropZone = $(this);
                const $item = $(ui.draggable);
                const newTabIndex = parseInt($dropZone.data("tab-index")) || 1;

                // ‚û§ ÁßªÂãï item ‰∏¶Êõ¥Êñ∞Â±¨ÊÄßËàá‰ΩçÁΩÆ
                $item.appendTo($dropZone);
                $item.attr("data-tab", newTabIndex);

                $item.css({
                    top: ui.offset.top - $dropZone.offset().top,
                    left: ui.offset.left - $dropZone.offset().left,
                    position: "absolute"
                });

                debounceSave();
            }
        });


        let dragTabSwitchTimer = null;

        $("#headerTabs button").droppable({
            accept: ".draggable-field",
            over: function (event, ui) {
                const $tabBtn = $(this);
                dragTabSwitchTimer = setTimeout(() => {
                    $tabBtn.trigger("click");
                }, 600); // ÊªëÈÅé 600ms Ëá™ÂãïÂàáÊèõÂàÜÈ†Å
            },
            out: function () {
                clearTimeout(dragTabSwitchTimer);
            }
        });

        $('.lookup-dropdown').each(function() {
            var $select = $(this);
            var table = $select.data('table');
            var key = $select.data('key');
            var result = $select.data('result');
            var selected = $select.data('selected');

            $.getJSON(`/api/TableFieldLayout/LookupData?table=${table}&key=${key}&result=${result}`, function(data) {
                $select.empty().append('<option value="">--Ë´ãÈÅ∏Êìá--</option>');
                for (var i = 0; i < data.length; i++) {
                    var val = data[i].key;
                    var txt = [];
                    for (var prop in data[i]) {
                        if (prop.startsWith('result')) txt.push(data[i][prop]);
                    }
                    var label = txt.join(' - ');  // È°ØÁ§∫Â§öÂÄãÊ¨Ñ‰Ωç
                    var opt = $('<option>')
                        .attr('value', val)
                        .text(label);
                    if (val == selected)
                        opt.attr('selected', true);
                    $select.append(opt);
                }
                // Ë®≠ÂÆöÂàùÂßã label È°ØÁ§∫
                $select.next('.lookup-label').text($select.find('option:selected').text());
            });

            // select change ÊôÇÊõ¥Êñ∞ÊóÅÈÇä labelÔºàÁ¥îÈ°ØÁ§∫Ôºâ
            $select.on('change', function() {
                $(this).next('.lookup-label').text($(this).find('option:selected').text());
            });
        });

        // ÈÄ≤Áï´Èù¢Âè™ÂÅö‰∏ÄÊ¨°ÔºöÊääÊØèÂÄãÂàÜÈ†ÅÁöÑÂÆπÂô®È´òÂ∫¶Ë®≠Êàê„ÄåÊúÄÂ∫ïÊ¨Ñ‰Ωç + ÂÅèÁßª„Äç
        function setInitialTabHeights(offsetPx = 10) {
        // ÂÖàÊääÈö±ËóèÂàÜÈ†ÅÊö´ÊôÇÈ°ØÁ§∫Âá∫‰æÜÔºåÂ•ΩÈáèÈ´òÂ∫¶
        const hiddenTabs = $(".tab-pane").not(".show");
        hiddenTabs.addClass("tmp-show").addClass("show").css("display", "block");

        $(".header-fields-tab").each(function () {
            let maxBottom = 0;
            $(this).children(".draggable-field").each(function () {
            const $el = $(this);
            const bottom = $el.position().top + $el.outerHeight();
            if (bottom > maxBottom) maxBottom = bottom;
            });
            // Ë®≠ÂÆöÂÆπÂô®È´òÂ∫¶ = ÊúÄÂ∫ïÊ¨Ñ‰Ωç + È†êÁïôÁ©∫Èñì
            $(this).height(Math.max(0, Math.ceil(maxBottom + offsetPx)));
        });

        // ÈÇÑÂéüÂâõÂâõÊö´ÊôÇÈ°ØÁ§∫ÁöÑÂàÜÈ†Å
        hiddenTabs.removeClass("show tmp-show").css("display", "");
        }

        // È¶ñÊ¨°Ê∏≤ÊüìÂæåÂü∑Ë°åÔºàÂ§öÂåÖ‰∏ÄÂ±§ÔºåÁ¢∫‰øù DOM ÈÉΩÂà∞‰ΩçÔºâ
        requestAnimationFrame(() => setInitialTabHeights(10)); // ÊÉ≥Â§ö‰∏ÄÈªûÂ∞±ÊîπÈÄôÂÄãÊï∏Â≠ó

    });

    // ÂñÆË∫´È†ÅËá™ÂãïÂ≠òÂÄº
    localStorage.setItem("lastViewedPaperNum", window.selectedPaperNum); // Razor ÂØ´ÂÖ•ÁõÆÂâçÂñÆËôü

</script>
<style>
body {
    background: #f7f9fb !important;
}

#header-fields {
    position: relative;
    min-height: 300px;
    background: rgba(0,0,0,0.03); /* ÈñãÁôºÈöéÊÆµÁî®‰æÜÁúãÈÇäÁïå */
}

.erp-detail-container {
    /* Âè™‰øùÁïô spacingÔºå‰∏çË¶ÅÂÜçË®≠ background È°èËâ≤ */
    min-height: 100vh;
    padding: 32px 0;
    margin-left: 3vw;
    margin-right: 3vw;
}

.erp-title {
    font-size: 1.6em;
    font-weight: 700;
    color: #235eb8;
    margin-bottom: 22px;
    padding-left: 18px;
    letter-spacing: 3px;
}

.erp-table-wrapper {
    background: #fff;
    border-radius: 13px;
    box-shadow: 0 4px 18px 0 #c3d4e6;
    padding: 24px 32px 16px 32px;
    margin: 0 auto 32px auto;
    max-width: 1400px;
    overflow-x: auto;
}
.erp-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    font-size: 1.06em;
    background: #fff;
}
.erp-table thead tr {
    background: #e7ecf3;
}
.erp-table th, .erp-table td {
    padding: 7px 12px;
    border-bottom: 1px solid #c5d1e4;
    white-space: nowrap;
    text-align: center;
    font-weight: 500;
    border-right: 1px solid #dde4ed;
}
.erp-table th:last-child, .erp-table td:last-child {
    border-right: none;
}

.erp-table th {
    color: #124d8b;
    font-weight: 700;
    font-size: 1.05em;
    letter-spacing: 1px;
    background: #e7ecf3;
}
.erp-table tbody tr:nth-child(even) {
    background: #f6f9fd;
}
.erp-table tbody tr:hover {
    background: #eef7ff;
}
.highlight-red {
    color: #e53b2d;
    font-weight: 700;
}
.highlight-blue {
    color: #2564b3;
    font-weight: 700;
}

.draggable-field {
    position: absolute;
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
    overflow: hidden;
    background: transparent;
}

.draggable-field label {
    cursor: move;
    font-size: 0.85em;
    margin-bottom: 2px;
    flex-shrink: 0;
}

textarea.resizable-input {
    flex-grow: 1;
    width: 100%;
    height: 100%;
    resize: none; /* Á¶ÅÁî® textarea Êú¨Ë∫´ÁöÑ resize */
    box-sizing: border-box;
    padding: 4px 6px;
    font-size: 0.9em;
}

.header-fields-tab {
    position: relative;
    min-height: 300px;
    background: rgba(0,0,0,0.03);
    min-height: 120px;       /* ÂÖàÁµ¶‰∏ÄÂÄãÂ∞èÁöÑÂÆâÂÖ®ÂÄº */
    padding-bottom: 8px;
}

.drop-hover {
    background-color: #cce5ff !important;
    border-radius: 4px;
}

.nav-link.drag-hover {
    background-color: #f3faff;
    font-weight: bold;
}

/* Áµ±‰∏ÄÊâÄÊúâ header form ÂÖßÊ¨Ñ‰ΩçÂ≠óÂûãÂ§ßÂ∞è */
.erp-header-form select,
.erp-header-form textarea,
.erp-header-form input,
.erp-header-form {
    font-size: 0.95em;  /* ÊîπÂ§ß‰∏ÄÈªûÔºåÊõ¥Ê∏ÖÊ•ö */
}

.erp-header-form select.form-select {
    font-size: 1em !important;
    height: 32px !important;
    min-height: 32px !important;
    line-height: 1.15 !important;
    padding-top: 2px !important;
    padding-bottom: 2px !important;
    padding-left: 6px !important;
    padding-right: 30px !important;
    /* ‰∏ãÊãâiconÊèõÂ∞è‰∏ÄÈªû‰∏¶ÂæÆË™øÈù†Âè≥ */
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: url('data:image/svg+xml;utf8,<svg width="11" height="11" fill="gray" xmlns="http://www.w3.org/2000/svg"><path d="M2 4.5l3.5 3.5L9 4.5" stroke="gray" stroke-width="2" fill="none" stroke-linecap="round"/></svg>');
    background-repeat: no-repeat;
    background-position: right 10px center;  /* Èù†Âè≥10px */
    background-size: 14px 14px;
    box-shadow: none !important; /* ÁßªÈô§Èô∞ÂΩ± */
    border-radius: 5px !important;
}



/* ÂàÜÈ†ÅÊåâÈàïÂúìËßí„ÄÅÂ≠óÂûãÂæÆË™ø */
.erp-header-form .nav-tabs .nav-link {
    border-radius: 8px 8px 0 0 !important;
    padding: 7px 18px 7px 18px;
    font-size: 1.05em;
    font-weight: 500;
    color: #235eb8;
}

/* ÈÅ∏‰∏≠ÁöÑÂàÜÈ†ÅÂº∑Ë™øËâ≤„ÄÅÈô∞ÂΩ±„ÄÅÁÑ°ÈÇä */
.erp-header-form .nav-tabs .nav-link.active {
    background: #fff;
    color: #124d8b;
    border-color: #bdd2f7 #bdd2f7 #fff #bdd2f7 !important;
    box-shadow: 0 2px 6px 0 #e4ecf7;
    font-weight: bold;
}

/* Ê©´ÊéíÔºöÊ®ôÈ°å + Ê¨Ñ‰Ωç */
.draggable-field.inline {
    position: absolute;
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 4px;
    box-sizing: border-box;
    overflow: hidden;
    background: transparent;

    /* ÈóúÈçµÔºöËÆì jQuery UI Ë®≠ÁöÑ width(px) ÁîüÊïà */
    /* Âà™Êéâ width:auto!important; */
    flex: 0 0 auto;          /* ‰∏çË¶ÅËÆì flex ÈáçÊñ∞Ë®àÁÆóÂØ¨Â∫¶Ôºå‰ΩøÁî®ÂÖÉÁ¥†Ëá™Â∑±ÁöÑ px ÂØ¨ */
    min-width: 100px;        /* Ëá™Ë°åË™øÊï¥ */
    max-width: 100%;
}
.draggable-field.inline label {
    cursor: move;
    flex: 0 0 auto;          /* Ê®ôÈ°å‰∏çÂêÉÂØ¨ */
    margin: 0 6px 0 0;
    font-size: 0.9em;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}
.draggable-field.inline .field-control {
    flex: 1 1 auto;
    height: 100%;
    display: flex;
}
.draggable-field.inline .field-control > * {
    width: 100%;
}
/* ËÆìËº∏ÂÖ•Êéß‰ª∂ÂêÉÂâ©È§òÁ©∫ÈñìÔºåÂ§ñÂ±§ li Ë™øÂØ¨ÊôÇ‰∏ÄËµ∑ËÆä */
.draggable-field.inline textarea,
.draggable-field.inline input,
.draggable-field.inline .form-select {
    flex: 1 1 auto;
    width: 100%;
    height: 100%;
    min-height: 32px;
    line-height: 1.2;
    resize: none;
    padding: 4px 6px;
    font-size: 0.95em;
}


</style>
