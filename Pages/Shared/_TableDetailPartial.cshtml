@model dynamic
@using PcbErpApi.Helpers
@using System.Text.Json
@{
    // 單頭欄位
    var headerFields = Model.HeaderTableFields; // 可視欄位
    var headerData = Model.HeaderData; // 單頭資料 (Dictionary<string, object> 或你的單頭Model)
    // 單身
    var fields = Model.TableFields;
    var items = Model.Items;
    var tableTitle = ViewData["TableTitle"] as string ?? "";
    var showRowNumber = ViewData["ShowRowNumber"] as bool? ?? true;
    var headerFieldsList = ((IEnumerable<TableFieldViewModel>)Model.HeaderTableFields).ToList();
    var addApiUrl = ViewData["AddApiUrl"]?.ToString() ?? "";
    var detailRouteTemplate = ViewData["SubRouteTemplate"]?.ToString() ?? "";
    var tableName = ViewData["DictTableName"]?.ToString() ?? "";
    var keyFieldName = ViewData["KeyFieldName"]?.ToString() ?? "PaperNum";
    var queryRedirectUrl = ViewData["QueryRedirectUrl"]?.ToString() ?? "";
    var DeleteApiUrl = ViewData["DeleteApiUrl"]?.ToString() ?? "";

    var groupedTabs = headerFieldsList
        .Where(f => (f.iShowWhere ?? 1) > 0) // ➜ 過濾掉 iShowWhere 為 0 的欄位
        .GroupBy(f => f.iShowWhere ?? 1)
        .OrderBy(g => g.Key)
        .ToDictionary(g => g.Key, g => g.ToList());

    var lookupMap = ViewData["LookupDisplayMap"] as Dictionary<string, Dictionary<string, string>>;

    var PaperNum = headerData.ContainsKey("PaperNum") ? headerData["PaperNum"]?.ToString() ?? "" : "";

    var headerLookupMap = ViewData["HeaderLookupMap"] as Dictionary<string, string>;
        
}

<div class="erp-detail-container">
    <div id="topToolbar" class="d-flex align-items-center mb-4" style="gap:12px;">
        <div class="btn-group" role="group" aria-label="row-nav" style="gap:6px;">
            <button type="button" class="btn btn-outline-primary" id="btnPrev">上一筆</button>
            <button type="button" class="btn btn-outline-primary" id="btnNext">下一筆</button>
        </div>
        <button type="submit" class="btn toolbar-btn" form="orderHeaderForm">
            儲存
        </button>
        <div class="ms-2">
            @await Html.PartialAsync("_TableToolbar", new TableToolbarModel {
                SearchBtnId = "btnSubSearch",
                AddBtnId = "btnSubAddNew",
                DeleteBtnId = "btnSubBatchDelete",
                QueryFields = ViewData["QueryFields"] as List<QueryFieldViewModel>,
                ModalId = "searchModal",
                ReportSpName = ViewData["ReportSpName"]?.ToString() ?? ""   // 👈 從外層再傳進來
            })
        </div>
    </div>

    <div class="action-rail">
      <button id="btnCalcAmount" class="fab">金額計算</button>
      <button id="btnClearDetails" class="fab fab-red">清除單身</button>
      <button id="btnSearchDetails" class="fab">搜尋</button> <!-- 👈 新的 -->
      <!-- 之後可以再加別的按鈕 -->
    </div>


        <!-- 單頭可編輯表單 -->
        <form id="orderHeaderForm" class="erp-header-form">
        <div class="row">
            <!-- ✅ Tabs 切換列 -->
            <ul class="nav nav-tabs" id="headerTabs" role="tablist">
                @foreach (var tab in groupedTabs.Keys)
                {
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(tab == 1 ? "active" : "")"
                                id="tab-@tab-tab"
                                data-bs-toggle="tab"
                                data-bs-target="#tab-@tab"
                                type="button" role="tab">
                            分頁 @tab
                        </button>
                    </li>
                }
            </ul>

                <!-- ✅ Tabs 對應內容 -->
              <div class="tab-content" id="headerTabContent">
                    @foreach (var tab in groupedTabs)
                    {
                        <div class="tab-pane fade @(tab.Key == 1 ? "show active" : "")"
                            id="tab-@tab.Key" role="tabpanel">
                            <ul class="list-unstyled header-fields-tab"
                                data-tab-index="@tab.Key"
                                style="position: relative">
                               @foreach (var field in tab.Value)
                                {
                                    object rawValue = null;
                                    headerData?.TryGetValue(field.FieldName, out rawValue);
                                    string displayText = "";

                                    // 1. lookup 優先顯示
                                    if (headerLookupMap != null && headerLookupMap.TryGetValue(field.FieldName, out var lookupVal))
                                    {
                                        displayText = lookupVal;
                                    }
                                    else if (rawValue != null)
                                    {
                                        //輸出格式用Helper轉型
                                        displayText = FormatHelper.FormatValue(rawValue, field.DataType, field.FormatStr);

                                        // ✅ 這裡補：數值型若為空，顯示 0
                                        if (string.IsNullOrWhiteSpace(displayText) && field.DataType?.ToLower() == "number")
                                        {
                                            displayText = "0";
                                        }
                                    }

                                    var top = field.iFieldTop ?? 0;
                                    var left = field.iFieldLeft ?? 0;
                                    var width = field.iFieldWidth ?? 160;
                                    var height = field.iFieldHeight ?? 44;

                                    var liClass = "draggable-field inline"; // 永遠橫排


                                     // 判斷有 lookup table 設定
                                    if (!string.IsNullOrWhiteSpace(field.LookupTable) &&
                                        !string.IsNullOrWhiteSpace(field.LookupKeyField) &&
                                        !string.IsNullOrWhiteSpace(field.LookupResultField))
                                    {
                                        // 下拉選單元件（用 select）
                                        <li class="@liClass"
                                            data-field="@field.FieldName"
                                            data-tab="@tab.Key"
                                            style="top:@(field.iFieldTop ?? 0)px; left:@(field.iFieldLeft ?? 0)px; width:@(field.iFieldWidth ?? 160)px; height:@(field.iFieldHeight ?? 44)px;">
                                            <label>@field.DisplayLabel</label>
                                            <select class="form-select lookup-dropdown"
                                                    name="@field.FieldName"
                                                    data-table="@field.LookupTable"
                                                    data-key="@field.LookupKeyField"
                                                    data-result="@field.LookupResultField.Replace(" ", "")"
                                                    data-selected="@rawValue"> 
                                                <option value="">--請選擇--</option>
                                            </select>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="@liClass"
                                            data-field="@field.FieldName"
                                            data-tab="@tab.Key"
                                            style="top:@(top)px; left:@(left)px; width:@(width)px; height:@(height)px;">
                                            <label>@field.DisplayLabel</label>
                                            <textarea class="form-control resizable-input"
                                                    name="@field.FieldName">@displayText</textarea>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    }
                </div>
        </div>
    </form>
    <!-- 單身明細 table -->
    <div class="erp-table-wrapper">
    <div class="d-flex justify-content-start mb-2">
        <button type="button" id="btnAddDetailRow" class="btn btn-outline-secondary btn-sm">
            ＋
        </button>
        <button type="button" class="btn btn-outline-danger btn-sm" id="btnRowDelete" title="刪除當前列">－</button>
    </div>
        <table class="erp-table">
            <thead>
                <tr>
                    @foreach(var col in fields)
                    {
                        <th>@col.DisplayLabel</th>
                    }
                </tr>
            </thead>
            <tbody>
                    @if (items != null)
                    {
                        var index = 1;
                        foreach (var item in items)
                        {
                            // 這兩個取值你本來就有
                            var paperNum = item.GetType().GetProperty("PaperNum")?.GetValue(item, null)?.ToString();
                            var itemNo   = item.GetType().GetProperty("Item")?.GetValue(item, null)?.ToString();

                            <tr data-paper-num="@paperNum" data-item="@itemNo" data-state="unchanged">
                                @foreach(var col in fields)
                                {
                                    object v = "";
                                    if (item is IDictionary<string, object> dict)
                                        dict.TryGetValue(col.FieldName, out v);
                                    else if (item is System.Dynamic.ExpandoObject exp)
                                    {
                                        var expDict = (IDictionary<string, object>)exp;
                                        expDict.TryGetValue(col.FieldName, out v);
                                    }
                                    else
                                    {
                                        var prop = item.GetType().GetProperty(col.FieldName);
                                        v = prop != null ? prop.GetValue(item, null) : "";
                                    }

                                    var rowKey = $"{paperNum}_{itemNo}";
                                    string display = null;
            
                                    if (lookupMap != null && lookupMap.TryGetValue(rowKey, out var dict2))
                                    {
                                        dict2.TryGetValue(col.FieldName, out display);
                                    }
                                        
                                        // 計算顯示值，先看 lookup，其次走格式化
                                        string cellValue;
                                        if (!string.IsNullOrEmpty(display))
                                        {
                                            cellValue = display;
                                        }
                                        else
                                        {
                                            cellValue = FormatHelper.FormatValue(v, col.DataType, col.FormatStr);
                                        }

                                        // 預先算好 name，避免 Razor 解析錯誤
                                        var inputName = $"Details[{index}].{col.FieldName}";

                                        <td>                                        
                                            <span class="cell-view">@cellValue</span>

                                            <input type="text"
                                                class="form-control form-control-sm cell-edit d-none w-100"
                                                name="@inputName"
                                                data-field="@col.FieldName"         
                                                data-init="@cellValue"             
                                                value="@cellValue" />
                                                
                                        </td>

                                }
                            </tr>
                            index++;
                        }
                    }
            </tbody>
        </table>
    </div>
</div>



<!-- SweetAlert2 for提示 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
<script src="~/js/toolbarHandler.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css" />

<!-- 呼叫元件 -->
@await Html.PartialAsync("_OrderDetailPicker",
  new DetailPickerConfig{
      ModalId = "detailPicker",
      PaperNum = PaperNum,
      FetchApi = "/api/OrderDetailSearch/fetch",
      InsertApi = "/api/OrderDetailSearch/insert",
      //Dicts = new Dictionary<string, LookupConfig>{
      //  ["PartNum"] = new LookupConfig{ Table="SPOdOCXOrderPOChice",         Key="PartNum",          Result="PartNum,MatName" },
      //  ["CustomerPartNum"] = new LookupConfig{ Table="CustomerMaterial", Key="CustomerPartNum", Result="CustomerPartNum,CustomerName" }
      //}
  })

<script>
// ============================
// 0) 頁面常數／Razor 注入
// ============================
const PAGE = {
  paperNum: "@PaperNum",
  keyField: "PaperNum",
  headerTable: ("@(Model.HeaderTableName ?? "")".trim() || "").toLowerCase(), // e.g. spodordermain
  detailTable: "@(tableName ?? "")".trim(),                                   // e.g. SpodOrderSub
  queryRedirectUrl: "@(ViewData["QueryRedirectUrl"])",
  addApiUrl: "@addApiUrl",
  deleteApiUrl: "@DeleteApiUrl",
  detailRouteTemplate: "@detailRouteTemplate",
  headerFields: @Html.Raw(JsonSerializer.Serialize(headerFieldsList)),
  detailFields: @Html.Raw(JsonSerializer.Serialize(fields))
};

// 讓其它工具可以取到目前單號
window.selectedPaperNum = '@(Model.HeaderData["PaperNum"] ?? "")';

// ============================
// 1) Toolbar Handler 啟動
// ============================
// 調用你原本的共用 ToolbarHandler（用單號當 key）
// 自動推導本頁的路徑樣板：/SpodOrderSub/{0}
  // 目前單號
  const PAPER_NUM = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(PaperNum ?? ""));
  // 從後端傳進來的「返回主頁面」基底路徑，例如 "/SpodOrderMain"
  const QUERY_REDIRECT_URL = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
    ViewData["QueryRedirectUrl"]?.ToString() ?? ""
  ));

  const PAGE_PAPER_NUM = ("@PaperNum" || "").trim();
  const KEY_FIELD = ("@(keyFieldName ?? "PaperNum")" || "PaperNum").trim();

  // 1) 從主程式帶進來的「返回主頁面」基底路徑，補上 /{0}
  const backToMainTpl = (PAGE.queryRedirectUrl || '').trim()
    ? PAGE.queryRedirectUrl.replace(/\/$/, '') + '/{0}'
    : '';

  // 2) 從伺服器帶來的子頁樣板（主頁→單身），把 {PaperNum} 正規化成 {0}
  const subTpl = (PAGE.detailRouteTemplate || '')
    .replace(/\{PaperNum\}/gi, '{0}');

  // 3) 在單身頁優先用 backToMainTpl（切回主頁），否則就用 subTpl（主頁切到單身）
  const finalSwitchTpl = backToMainTpl || subTpl;

  // 防呆：log 一下
  console.debug('[Switch template]', finalSwitchTpl);

  new ToolbarHandler({
    searchBtnId: "btnSubSearch",
    addBtnId: "btnSubAddNew",
    deleteBtnId: "btnSubBatchDelete",
    getSelectedId: () => (PAGE.paperNum || window.selectedPaperNum || ''), // 確保有單號
    modalId: "searchModal",
    formId: "searchForm",
    addApiUrl: PAGE.addApiUrl,
    deleteApiUrlFn: id => `/api/${PAGE.deleteApiUrl}/${id || PAGE.paperNum}`,
    detailRouteTemplate: finalSwitchTpl,   // ← 這裡換成剛算好的樣板
    tableName: "@tableName",
    renderTable: null,
    renderPagination: null,
    renderOrderCount: null,
    restoreSearchForm: null,
    queryRedirectUrl: PAGE.queryRedirectUrl
  });

// 手動接管「切換」按鈕：單身頁 → 主頁
(function hookToggleBackToMain() {
  // 找到切換鈕（按 id；找不到再以文字比對）
  const rawBtn = document.getElementById('btnToggle') ||
    Array.from(document.querySelectorAll('button, a'))
      .find(el => (el.textContent || '').trim() === '切換');
  if (!rawBtn) return;

  // 用 clone 置換掉原元素，清空原本所有事件監聽（包含 ToolbarHandler 綁的）
  const btn = rawBtn.cloneNode(true);
  rawBtn.replaceWith(btn);

  // 我們自己的處理器（用捕獲階段 + 停止冒泡，保險）
  btn.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();
    e.stopImmediatePropagation();

    const base = (QUERY_REDIRECT_URL || '').trim().replace(/\/$/, ''); // 例如 /SpodOrderMain
    if (!base) {
      Swal.fire({ icon: 'error', title: '未提供返回主頁路徑' });
      return;
    }

    const id = (PAGE_PAPER_NUM || window.selectedPaperNum || '').trim();
    const sep = base.includes('?') ? '&' : '?';
    const url = id ? `${base}${sep}${encodeURIComponent(KEY_FIELD)}=${encodeURIComponent(id)}` : base;

    location.href = url;
  }, { capture: true });
})();

// ============================
// 2) 共用小工具（數值處理、字串化）
// ============================
function normalizeNumberFields(obj, fieldDefs) {
  (fieldDefs || []).forEach(f => {
    if ((f.DataType || '').toLowerCase() === 'number') {
      const k = f.FieldName;
      if (obj[k] != null) obj[k] = obj[k].toString().replace(/,/g, '');
    }
  });
}
function normalizeDetailsNumbers(detailRows, fieldDefs) {
  const numberFields = (fieldDefs || [])
    .filter(f => (f.DataType || '').toLowerCase() === 'number')
    .map(f => f.FieldName.toLowerCase());
  detailRows.forEach(r => {
    numberFields.forEach(fn => {
      Object.keys(r).forEach(k => {
        if (k.toLowerCase() === fn && r[k] != null) r[k] = r[k].toString().replace(/,/g, '');
      });
    });
  });
}
// 依欄位型別把 raw 轉字串（避免 [object Object]）
function toCellString(raw, colMeta) {
  if (raw == null) return '';
  if (typeof raw === 'object') return '';
  let s = String(raw);
  const dt = (colMeta?.DataType || '').toLowerCase();
  if (dt.includes('date')) {
    const d = new Date(s); if (!isNaN(d)) return d.toISOString().slice(0,10);
  }
  if (dt === 'number') return s.replace(/,/g, '');
  return s;
}

// ============================
// 3) 明細列 收集 / 新增 / 刪除 / 整列選取
// ============================

// 3-1 收集目前表格所有「有變動」的明細列
function collectDetails() {
  const rows = document.querySelectorAll('.erp-table tbody tr');
  const details = [];
  rows.forEach(tr => {
    let changed = (tr.dataset.state === 'added' || tr.dataset.state === 'deleted'); // 新增/刪除一定送
    const row = {
      __state: tr.dataset.state || 'modified',
      PaperNum: tr.dataset.paperNum || PAGE.paperNum
    };
    tr.querySelectorAll('.cell-edit').forEach(inp => {
      const field = inp.dataset.field;
      if (!field) return;
      const val = (inp.value ?? '').toString();
      row[field] = val;
      if (!changed && (val !== (inp.dataset.init ?? ''))) changed = true;
    });
    if (row.Item == null && tr.dataset.item) row.Item = tr.dataset.item;
    if (changed) {
      if (row.__state === 'unchanged') row.__state = 'modified';
      details.push(row);
    }
  });
  return details;
}

// 3-2 新增一列（呼叫後端插 DB，再回填到前端並立刻可編輯）
async function onAddRowClick() {
  if (!PAGE.detailTable) {
    Swal.fire({icon:'error', title:'找不到明細表名（DETAIL_TABLE）'}); 
    return;
  }
  try {
    const res = await fetch('/api/OrderHeaderApi/AddDetailRow', {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify({ detailTable: PAGE.detailTable, paperNum: PAGE.paperNum })
    });
    const json = await res.json();
    if (!res.ok || !json?.ok) throw new Error(json?.error || '新增失敗');
    appendDetailRowFromServer(json.row || {});
  } catch (err) {
    Swal.fire({icon:'error', title:'新增明細失敗', text: String(err.message || err)});
  }
}

// 3-3 將後端新插入的那筆 row 追加到表格；狀態標成 unchanged（因為已在 DB）
function appendDetailRowFromServer(row) {
  const tbody = document.querySelector('.erp-table tbody');
  const tr = document.createElement('tr');
  tr.dataset.paperNum = row.PaperNum || PAGE.paperNum;
  tr.dataset.item = row.Item;
  tr.dataset.state = 'unchanged';

  let tdsHtml = '';
  (PAGE.detailFields || []).forEach((col) => {
    const v = toCellString(row[col.FieldName], col);
    const inputName = `Details[${tbody.rows.length + 1}].${col.FieldName}`;
    tdsHtml += `
      <td>
        <span class="cell-view">${v}</span>
        <input type="text"
          class="form-control form-control-sm cell-edit d-none w-100"
          name="${inputName}"
          data-field="${col.FieldName}"
          data-init="${v}"
          value="${v}">
      </td>`;
  });
  tr.innerHTML = tdsHtml;
  tbody.appendChild(tr);

  // 這列立刻可編輯＋高亮
  makeRowEditable(tr);
  selectRow(tr);

  // 輸入 ⇒ 標記 modified（除非是新增）
  tr.querySelectorAll('.cell-edit').forEach(inp => {
    inp.addEventListener('input', () => {
      if (tr.dataset.state !== 'added') tr.dataset.state = 'modified';
    });
  });
}

// 3-4 刪除目前選取列（新列：前端移除；舊列：呼叫後端刪除）
async function onDeleteRowClick() {
  const tr = document.querySelector('.erp-table tbody tr.row-selected');
  if (!tr) { Swal.fire({icon:'info', title:'請先點選要刪除的明細列'}); return; }

  const pn = tr.dataset.paperNum || PAGE.paperNum;
  const item = tr.dataset.item || '';
  if (!pn || !item) {
    Swal.fire({icon:'error', title:'無法判斷單號或項次'}); return;
  }

  const { isConfirmed } = await Swal.fire({
    icon: 'question', title: '刪除這一筆明細？', showCancelButton: true, confirmButtonText: '刪除', cancelButtonText: '取消'
  });
  if (!isConfirmed) return;

  if (tr.dataset.state === 'added') { // 未入庫
    const next = tr.nextElementSibling || tr.previousElementSibling;
    tr.remove(); if (next) selectRow(next);
    return;
  }

  try {
    const url = `/api/OrderHeaderApi/DeleteRow`
      + `?table=${encodeURIComponent(PAGE.detailTable)}`
      + `&paperNum=${encodeURIComponent(pn)}`
      + `&item=${encodeURIComponent(item)}`;
    const res = await fetch(url, { method: 'DELETE' });
    if (!res.ok) throw new Error(await res.text());

    const next = tr.nextElementSibling || tr.previousElementSibling;
    tr.remove(); if (next) selectRow(next);
    Swal.fire({icon:'success', title:'刪除完成', timer:900, showConfirmButton:false});
  } catch (err) {
    Swal.fire({icon:'error', title:'刪除失敗', text: String(err)});
  }
}

// 3-5 整列選取＆讓該列可編輯
const tbodyEl = document.querySelector('.erp-table tbody');
function selectRow(tr) {
  if (!tr) return;
  document.querySelectorAll('.erp-table tbody tr.row-selected')
    .forEach(r => r.classList.remove('row-selected'));
  tr.classList.add('row-selected');
}
function makeRowEditable(tr) {
  tr.querySelectorAll('.cell-view').forEach(el => el.classList.add('d-none'));
  tr.querySelectorAll('.cell-edit').forEach(el => el.classList.remove('d-none'));
  const first = tr.querySelector('.cell-edit[data-field="PartNum"]') || tr.querySelector('.cell-edit');
  first?.focus(); first?.select?.();
}
tbodyEl.addEventListener('click',  e => { const tr = e.target.closest('tr'); if (tr) selectRow(tr); });
tbodyEl.addEventListener('focusin', e => { const tr = e.target.closest('tr'); if (tr) selectRow(tr); });
document.getElementById('btnAddDetailRow')?.addEventListener('click', onAddRowClick);
document.getElementById('btnSubAddNew')?.addEventListener('click', (e)=>{ e.preventDefault(); onAddRowClick(); });
document.getElementById('btnRowDelete')?.addEventListener('click', onDeleteRowClick);

// ============================
// 4) 儲存單頭＋單身（組 payload → 呼叫 API）
// ============================
document.getElementById('orderHeaderForm').addEventListener('submit', async function (e) {
  e.preventDefault();
  const header = Object.fromEntries(new FormData(this));
  normalizeNumberFields(header, PAGE.headerFields);

  const details = collectDetails();
  normalizeDetailsNumbers(details, PAGE.detailFields);

  const payload = {
    ...header,
    Details: details,
    __headerTable: PAGE.headerTable,
    __detailTable: PAGE.detailTable || undefined
  };

  try {
    const resp = await fetch('/api/OrderHeaderApi/SaveOrderHeader', {
      method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload)
    });
    if (resp.ok) {
      const result = await resp.json();
      if (result.updated) {
        await Swal.fire({ icon: 'success', title: '儲存成功！', timer: 1000, showConfirmButton: false });
        localStorage.setItem("afterSave", "1"); location.reload();
      } else {
        Swal.fire({ icon: 'info', title: '沒有資料異動' });
      }
    } else {
      let msg = '儲存失敗'; try { const txt = await resp.text(); msg = txt || msg; } catch {}
      Swal.fire({ icon: 'error', title: msg });
    }
  } catch (err) {
    Swal.fire({ icon: 'error', title: '網路或伺服器錯誤' });
  }
});

// ============================
// 5) 檢視/編輯模式切換（若頁面有該按鈕）
// ============================
const editBtn = document.getElementById('btnViewEditToggle');
if (editBtn) {
  let isEdit = false;
  const getHeaderValueByLabel = (labelText) => {
    const $li = $('.draggable-field').filter(function () {
      return $(this).children('label').first().text().trim() === labelText;
    }).first();
    if (!$li.length) return null;
    const $ctrl = $li.find('select, input, textarea').first();
    if (!$ctrl.length) return null;
    if ($ctrl.is('select')) return $ctrl.find('option:selected').text().trim();
    return ($ctrl.val() || '').toString().trim();
  };

  editBtn.addEventListener('click', function () {
    const status = getHeaderValueByLabel('單據狀態') || '';
    if (window.BLOCK_STATUSES && window.BLOCK_STATUSES.includes(status)) {
      Swal.fire({ icon: 'warning', title: '無法修改', text: `此單據狀態為「${status}」，不可進行修改。`}); return;
    }
    isEdit = !isEdit; editBtn.textContent = isEdit ? '保留' : '修改';
    document.querySelectorAll('.erp-header-form input, .erp-header-form textarea, .erp-header-form select')
      .forEach(el => el.disabled = !isEdit);
    document.querySelectorAll('.erp-table .cell-view').forEach(el => el.classList.toggle('d-none', isEdit));
    document.querySelectorAll('.erp-table .cell-edit').forEach(el => el.classList.toggle('d-none', !isEdit));
    document.querySelectorAll('.erp-table .cell-edit').forEach(inp => {
      inp.addEventListener('input', () => {
        const tr = inp.closest('tr'); if (tr && tr.dataset.state !== 'added') tr.dataset.state = 'modified';
      });
    });
  });

  // 頁面刷新後自動回到編輯狀態（若剛剛存檔成功）
  window.addEventListener('load', () => {
    document.querySelectorAll('.erp-header-form input, .erp-header-form textarea, .erp-header-form select')
      .forEach(el => el.disabled = true);
    if (localStorage.getItem("afterSave") === "1") {
      localStorage.removeItem("afterSave");
      document.getElementById("btnViewEditToggle")?.click();
    }
  });
}

// ============================
// 6) Header 版面拖拉儲存 / Lookup 下拉初始化（jQuery）
// ============================
$(function () {
  let debounceTimer;
  const debounceSave = () => { clearTimeout(debounceTimer); debounceTimer = setTimeout(saveLayoutChanges, 400); };

  function saveLayoutChanges() {
    const layout = [];
    const hiddenTabs = $(".tab-pane").not(".show");
    hiddenTabs.addClass("temporary-show").addClass("show").css("display", "block");
    $(".draggable-field").each(function () {
      const $li = $(this);
      layout.push({
        fieldName: $li.data("field"),
        top: Math.round($li.position().top),
        left: Math.round($li.position().left),
        width: Math.round($li.outerWidth()),
        height: Math.round($li.outerHeight()),
        ishowWhere: parseInt($li.attr("data-tab")) || 1
      });
    });
    hiddenTabs.removeClass("show").removeClass("temporary-show").css("display", "");
    if (!layout.length) return;

    fetch("/api/TableFieldLayout/SaveHeaderLayout", {
      method: "POST", headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ tableName: "@Model.HeaderTableName".toLowerCase(), layoutUpdates: layout })
    }).catch(()=>{});
  }

  // draggable + resizable
  $(".draggable-field").each(function () {
    const $li = $(this);
    $li.draggable({
      handle: "label",
      helper: function () {
        return $("<div>").text($(this).find("label").text()).css({
          width: "80px", height: $li.outerHeight() + "px",
          background: "#eef", border: "1px dashed #999", padding: "4px", "font-size": "0.9em"
        });
      },
      appendTo: "body", zIndex: 10000,
      start: function () { $(this).hide(); },
      stop:  function () { $(this).show(); }
    });
    $li.resizable({ handles: "se", minWidth: 50, minHeight: 30, stop: debounceSave });
  });

  // droppable 區域（跨分頁拖曳）
  $(".header-fields-tab").droppable({
    accept: ".draggable-field", tolerance: "pointer",
    over: function () { $(this).addClass("drop-hover"); },
    out:  function () { $(this).removeClass("drop-hover"); },
    drop: function (event, ui) {
      $(this).removeClass("drop-hover");
      const $zone = $(this);
      const $item = $(ui.draggable);
      const newTabIndex = parseInt($zone.data("tab-index")) || 1;
      $item.appendTo($zone).attr("data-tab", newTabIndex).css({
        top: ui.offset.top - $zone.offset().top,
        left: ui.offset.left - $zone.offset().left,
        position: "absolute"
      });
      debounceSave();
    }
  });

  // 拖過分頁標籤自動切換
  let dragTabSwitchTimer = null;
  $("#headerTabs button").droppable({
    accept: ".draggable-field",
    over: function () { const $tabBtn = $(this); dragTabSwitchTimer = setTimeout(() => { $tabBtn.trigger("click"); }, 600); },
    out:  function () { clearTimeout(dragTabSwitchTimer); }
  });

  // Lookup 下拉載入
  $('.lookup-dropdown').each(function() {
    const $select = $(this);
    const table = $select.data('table'), key = $select.data('key'),
          result = $select.data('result'), selected = $select.data('selected');
    $.getJSON(`/api/TableFieldLayout/LookupData?table=${table}&key=${key}&result=${result}`, function(data) {
      $select.empty().append('<option value="">--請選擇--</option>');
      (data || []).forEach(row => {
        const val = row.key;
        const label = Object.keys(row).filter(p => p.startsWith('result')).map(p => row[p]).join(' - ');
        const $opt = $('<option>').val(val).text(label);
        if (val == selected) $opt.attr('selected', true);
        $select.append($opt);
      });
      $select.next('.lookup-label').text($select.find('option:selected').text());
    });
    $select.on('change', function() {
      $(this).next('.lookup-label').text($(this).find('option:selected').text());
    });
  });

  // Tab 高度一次性調整（以便容器能包住欄位）
  function setInitialTabHeights(offsetPx = 10) {
    const hiddenTabs = $(".tab-pane").not(".show");
    hiddenTabs.addClass("tmp-show").addClass("show").css("display", "block");
    $(".header-fields-tab").each(function () {
      let maxBottom = 0;
      $(this).children(".draggable-field").each(function () {
        const $el = $(this);
        maxBottom = Math.max(maxBottom, $el.position().top + $el.outerHeight());
      });
      $(this).height(Math.max(0, Math.ceil(maxBottom + offsetPx)));
    });
    hiddenTabs.removeClass("show tmp-show").css("display", "");
  }
  requestAnimationFrame(() => setInitialTabHeights(10));
});

// ============================
// 7) 上一筆 / 下一筆（依列表查詢結果）
// ============================
const NAV_BTN_PREV = document.getElementById('btnPrev');
const NAV_BTN_NEXT = document.getElementById('btnNext');
let navIds = [], navIndex = -1;

function loadLastFilters() {
  try { const s = localStorage.getItem("orderListQueryFilters"); return s ? JSON.parse(s) : []; }
  catch { return []; }
}
function getDetailBasePath() { return location.pathname.replace(/\/[^\/]+$/, "/"); }
function gotoPaper(pn) { if (!pn) return; localStorage.setItem("lastViewedPaperNum", pn); location.href = getDetailBasePath() + pn; }
function updateNavButtons() {
  const hasPrev = navIndex > 0;
  const hasNext = navIndex >= 0 && navIndex < navIds.length - 1;
  NAV_BTN_PREV.disabled = !hasPrev;
  NAV_BTN_NEXT.disabled = !hasNext;
  NAV_BTN_PREV.onclick = () => hasPrev && gotoPaper(navIds[navIndex - 1]);
  NAV_BTN_NEXT.onclick = () => hasNext && gotoPaper(navIds[navIndex + 1]);
}
async function fetchIdListByApi(filters) {
  const res = await fetch('/api/PagedQuery/IdList', {
    method: 'POST', headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ table: PAGE.headerTable, keyField: PAGE.keyField, filters: filters || [] })
  });
  const json = await res.json();
  return Array.isArray(json.ids) ? json.ids : [];
}
async function fetchIdListByPagedQuery(filters) {
  const fs = [...(filters || []), {Field:"page",Op:"",Value:"1"}, {Field:"pageSize",Op:"",Value:"999999"}];
  const res = await fetch('/api/PagedQuery/PagedQuery', {
    method: 'POST', headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ table: PAGE.headerTable, filters: fs })
  });
  const json = await res.json();
  const rows = Array.isArray(json.data) ? json.data : [];
  return rows.map(r => r[PAGE.keyField]).filter(Boolean);
}
async function initRowNavigation() {
  try {
    const filters = loadLastFilters();
    try { navIds = await fetchIdListByApi(filters); }
    catch { navIds = await fetchIdListByPagedQuery(filters); }
    navIndex = navIds.indexOf(PAGE.paperNum);
    updateNavButtons();
  } catch {
    NAV_BTN_PREV.disabled = true; NAV_BTN_NEXT.disabled = true;
  }
}
initRowNavigation();

// ============================
// 8) 其他：把最後檢視的單號存在 localStorage
// ============================
localStorage.setItem("lastViewedPaperNum", window.selectedPaperNum);

// 依 header 欄位「標籤文字」抓顯示值（select 取文字，其它取 value）
function getHeaderValueByLabel(labelText) {
  const li = Array.from(document.querySelectorAll('.draggable-field'))
    .find(el => (el.querySelector('label')?.textContent || '').trim() === labelText);
  if (!li) return '';
  const ctrl = li.querySelector('select, input, textarea');
  if (!ctrl) return '';
  if (ctrl.tagName.toLowerCase() === 'select') {
    const opt = ctrl.options[ctrl.selectedIndex];
    return (opt?.text || opt?.value || '').trim();
  }
  return (ctrl.value || '').trim();
}

// ============================
// 9) 其他：金額計算按鈕（若頁面有
document.getElementById('btnCalcAmount')?.addEventListener('click', async () => {
  const paper = (PAGE.paperNum || window.selectedPaperNum || '').trim();
  if (!paper) return Swal.fire({icon:'info', title:'沒有單號'});

  try {
    const resp = await fetch('/api/StoredProc/exec', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        Key: 'CalcOrderAmount',      // 對應 _registry 的 key
        Args: { PaperNum: paper }    // 必填參數
      })
    });

    const raw = await resp.text();
    let data;
    try { data = JSON.parse(raw); } catch { data = { ok:false, error: raw }; }

    if (resp.ok && data.ok) {
      Swal.fire({icon:'success', title:'計算完成', timer:900, showConfirmButton:false});
      location.reload();
    } else {
      Swal.fire({icon:'error', title:'呼叫失敗', text: data.error || `HTTP ${resp.status}`});
    }
  } catch (e) {
    Swal.fire({icon:'error', title:'網路錯誤', text: String(e)});
  }
});

document.getElementById('btnClearDetails')?.addEventListener('click', async () => {
  const paper = (PAGE.paperNum || window.selectedPaperNum || '').trim();
  const paperId = (PAGE.detailTable || '').trim().replace(/^dbo\./i, '');
  if (!paper)  return Swal.fire({icon:'info',  title:'沒有單號'});
  if (!paperId) return Swal.fire({icon:'info',  title:'缺少單身表名（PaperId）'});

  // ① 狀態限制
  const status = getHeaderValueByLabel('單據狀態') || '';
  const ALLOW  = ['作業中', '審核中'];
  const BLOCK  = ['已確認', '已結案', '作廢中'];

  if (BLOCK.includes(status) || !ALLOW.includes(status)) {
    return Swal.fire({
      icon: 'warning',
      title: '此狀態不可清除',
      html: `單據狀態：<b>${status || '（空）'}</b>`
    });
  }

  // ② 二次確認
  const { isConfirmed } = await Swal.fire({
    icon: 'warning',
    title: '確定要清除這張單的所有單身嗎？',
    html: `單號：<b>${paper}</b><br>表：<code>${paperId}</code><br>狀態：<b>${status}</b>`,
    showCancelButton: true, confirmButtonText: '清除', cancelButtonText: '取消'
  });
  if (!isConfirmed) return;

  // ③ 呼叫 SP
  try {
    const resp = await fetch('/api/StoredProc/exec', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        Key: 'ClearOrderDetails',
        Args: { PaperNum: paper, PaperId: paperId, Item: 0 }
      })
    });

    const raw = await resp.text();
    let data; try { data = JSON.parse(raw); } catch { data = { ok:false, error: raw }; }

    if (resp.ok && data.ok) {
      const msg = (data.rows != null) ? `已清除 ${data.rows} 筆` : '清除完成';
      await Swal.fire({icon:'success', title: msg, timer:900, showConfirmButton:false});
      location.reload();
    } else {
      Swal.fire({icon:'error', title:'清除失敗', text: data.error || `HTTP ${resp.status}`});
    }
  } catch (e) {
    Swal.fire({icon:'error', title:'網路錯誤', text: String(e)});
  }
});

  // 綁定外頁的「搜尋」按鈕
  document.getElementById('btnSearchDetails')?.addEventListener('click', ()=>{
    const paper = (window.selectedPaperNum || '').trim();
    window.OrderDetailPicker_detailPicker.open({ paperNum: paper });
  });

  // 可選：攔截元件的確定事件
  $('#detailPicker').on('odp:confirmed', function(e, res){
    // 例如：你不想 reload，可在這裡自己處理
    // console.log('confirmed:', res);
  });
</script>

<style>
/* =========================================
   A) 全局/版面
   ========================================= */
body { background: #f7f9fb !important; }
.erp-detail-container { min-height: 100vh; padding: 32px 0; margin-left: 3vw; margin-right: 3vw; }

/* =========================================
   B) Header 表單 & Tabs
   ========================================= */
.erp-header-form,
.erp-header-form select,
.erp-header-form textarea,
.erp-header-form input { font-size: 0.95em; }

.erp-header-form select.form-select{
  font-size: 1em !important; height: 32px !important; min-height: 32px !important; line-height: 1.15 !important;
  padding: 2px 30px 2px 6px !important; appearance: none; -webkit-appearance: none; -moz-appearance: none;
  background-image: url('data:image/svg+xml;utf8,<svg width="11" height="11" fill="gray" xmlns="http://www.w3.org/2000/svg"><path d="M2 4.5l3.5 3.5L9 4.5" stroke="gray" stroke-width="2" fill="none" stroke-linecap="round"/></svg>');
  background-repeat: no-repeat; background-position: right 10px center; background-size: 14px 14px; box-shadow: none !important; border-radius: 5px !important;
}
.header-fields-tab{
  position: relative; min-height: 120px; padding-bottom: 8px;
  background: #eef2f9 !important; box-shadow: 0 2px 6px rgba(0,0,0,0.04);
}
.drop-hover{ background-color:#cce5ff !important; border-radius:4px; }

.erp-header-form .nav-tabs .nav-link{ border-radius:8px 8px 0 0 !important; padding:7px 18px; font-size:1.05em; font-weight:500; color:#235eb8; }
.erp-header-form .nav-tabs .nav-link.active{
  background:#fff; color:#124d8b; border-color:#bdd2f7 #bdd2f7 #fff #bdd2f7 !important; box-shadow:0 2px 6px 0 #e4ecf7; font-weight:bold;
}

/* draggable 欄位（橫排 label + 控件） */
.draggable-field{ position:absolute; display:flex; flex-direction:column; box-sizing:border-box; overflow:hidden; background:transparent; }
.draggable-field.inline{ display:flex; flex-direction:row; align-items: center; gap:4px; flex:0 0 auto; min-width:100px; max-width:100%; }
.draggable-field label{ cursor:move; font-size:0.85em; margin:0 6px 0 0; white-space:nowrap; text-overflow:ellipsis; overflow:hidden; }
.draggable-field.inline .field-control{ flex:1 1 auto; height:100%; display:flex; }
.draggable-field.inline textarea,
.draggable-field.inline input,
.draggable-field.inline .form-select{
  flex:1 1 auto; width:100%; height:100%; min-height:32px; line-height:1.2; resize:none; padding:4px 6px; font-size:0.95em;
}
.draggable-field.inline label{
  white-space: nowrap !important;     /* 單列顯示 */
  overflow: visible !important;       /* 不裁切 */
  text-overflow: clip !important;     /* 不顯示 … */
  max-width: none !important;         /* 讓標籤可撐開（必要時手動調寬 li） */
}

/* =========================================
   C) 明細表格（視覺 & 編輯）
   ========================================= */
.erp-table-wrapper{
  background:#fff; box-shadow:0 4px 18px 0 #c3d4e6; max-width:1400px; overflow-x:auto;
  padding:8px !important; border-radius:0 0 13px 13px; border:1px solid #d6dbe5;
}
.erp-table{ width:100%; border-collapse:separate; border-spacing:0; font-size:1.06em; background:#fff; }
.erp-table thead tr{ background:#e7ecf3; }
.erp-table th, .erp-table td{
  background:#f1f5fb; padding:7px 12px; border-bottom:1px solid #c5d1e4; white-space:nowrap; text-align:center;
  font-weight:500; border-right:1px solid #dde4ed; height:34px;
}
.erp-table th:last-child, .erp-table td:last-child{ border-right:none; }
.erp-table th{ color:#124d8b; font-weight:700; font-size:1.05em; letter-spacing:1px; background:#e7ecf3; }
.erp-table tbody tr:nth-child(even){ background:#f6f9fd; }
.erp-table tbody tr:hover{ background:#eef7ff; }

/* 顯示/編輯雙層：span 顯示、input 編輯（切換 display） */
.erp-table td{ position:relative; padding:0; }
.erp-table td .cell-view{ display:inline-block; width:100%; text-align:inherit; }
.erp-table td .cell-edit{
  width:100% !important; height:100% !important; box-sizing:border-box; margin:0; border:none; border-radius:0;
  background:#fff !important; font-size:inherit !important; font-weight:inherit !important; font-family:inherit !important;
  line-height:inherit !important; text-align:inherit !important; padding:0 4px;
}

/* 整列選取高亮＆左側藍條 */
.erp-table tbody tr.row-selected > td{ background:#fff8c6 !important; }
.erp-table tbody tr.row-selected > td:first-child{ position:relative; }
.erp-table tbody tr.row-selected > td:first-child::after{
  content:""; position:absolute; left:0; top:0; bottom:0; width:4px; background:#0d6efd; border-radius:2px;
}
/* 移除預設 focus 藍框（避免只看到某一格有外框） */
.erp-table td:focus, .erp-table td *:focus{ outline:none !important; box-shadow:none !important; }

/* =========================================
   D) 其它色彩強調（若有需要）
   ========================================= */
.highlight-red { color:#e53b2d; font-weight:700; }
.highlight-blue{ color:#2564b3; font-weight:700; }

/* =========================================
   E) 左側浮動按鈕群
   ========================================= */
/* 把左側行動軌道（浮動鈕）預留寬度抽成變數 */
:root{
  --fab-left: 12px;      /* 浮動鈕距離視窗左側 */
  --fab-width: 100px;    /* 浮動鈕實際寬度（含內距，可微調） */
  --fab-gap: 20px;       /* 浮動鈕右側緩衝 */
  --rail-reserve: calc(var(--fab-left) + var(--fab-width) + var(--fab-gap));
}

/* 讓整個按鈕欄固定在左側；每顆按鈕在欄位內垂直排列 */
.action-rail{
  position: fixed;
  left: var(--fab-left);
  top: 80px;
  display: flex;
  flex-direction: column;
  gap: 10px;
  z-index: 900;
}


/* 浮動按鈕 */
.fab{
  position: relative; /* 不再用 fixed，讓它跟著 action-rail 排列 */
  min-width: var(--fab-width);
  padding: 8px 12px;
  background:#ffc107; color:#090101; font-weight:700;
  border-radius:10px; cursor:pointer;
  box-shadow:0 6px 16px rgba(0,0,0,.2);
  border: 0;
}
.fab:hover{ filter:brightness(0.95); }

/* 紅色風格：清除單身 */
.fab-red{
  background:#dc3545; color:#fff;
}

/* 內容容器左邊預留的安全邊界（＝ 按鈕位置 + 按鈕寬 + 緩衝距離） */
/* 仍保留內容整體的左側預留空間（避免被浮動鈕擋住） */
.erp-detail-container{
  margin-left: var(--rail-reserve);
  margin-right: 3vw;
  padding: 32px 0;
}
/* 移除「金額計算」按鈕的黑色外框/outline */
#btnCalcAmount {
  border: 0 !important;
  outline: none !important;
  -webkit-tap-highlight-color: transparent; /* 移除行動裝置點擊高亮 */
}

/* 針對聚焦/按下狀態再保險一次 */
#btnCalcAmount:focus,
#btnCalcAmount:focus-visible,
#btnCalcAmount:active {
  outline: none !important;
  box-shadow: 0 6px 16px rgba(0,0,0,.2) !important; /* 保留陰影，不要黑框 */
}

/* 若你把它改成 <button>，Firefox 會多一層內框，順便去掉 */
#btnCalcAmount::-moz-focus-inner {
  border: 0 !important;
}

/* 只有最上面工具列要「吃回去」那段預留寬，往左移回去 */
#topToolbar{
  margin-left: calc(-1 * var(--rail-reserve)) !important;
  padding-left: 0 !important;
  justify-content: flex-start !important;
}

/* 若某些框架樣式還加了左邊距，再保險清掉 */
#topToolbar > .ms-2,
#topToolbar .btn-toolbar{
  margin-left: 0 !important;
}



</style>

