@{
    var table = (Context.Request.Query["table"].ToString() ?? "").Trim();
    var lang  = (Context.Request.Query["lang"].ToString()  ?? "TW").Trim();
    var field = (Context.Request.Query["field"].ToString() ?? "").Trim();
    Layout = null;
}
<!doctype html>
<html lang="zh-Hant">
<head>
  <meta charset="utf-8">
  <title>欄位說明 / 資料辭典</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body{ background:#f7f9fb; }
    .page-wrap{ padding:20px; }
    .table thead th{ position:sticky; top:0; background:#e9eef6; z-index:2; }

    /* 原本畫出藍線的是這個，把 outline 拿掉改用淡底色 */
    .focus-row td{ background:#e7f1ff !important; }

    /* 只在本頁的表格內覆寫 Bootstrap 的藍色 focus ring */
    .dict-editor #dictTable td,
    .dict-editor #dictTable th{
      overflow:hidden;
      position:relative;
    }
    .dict-editor #dictTable .form-control:focus,
    .dict-editor #dictTable .form-select:focus,
    .dict-editor #dictTable .form-check-input:focus{
      outline:0 !important;
      box-shadow:none !important;
      border-color:#ced4da !important;
    }

    .dict-editor #dictTable td{ padding:.3rem .5rem; }
    .dict-editor #dictTable input.form-control,
    .dict-editor #dictTable select.form-select{
      width:100%;
      box-sizing:border-box;
    }
  </style>
</head>
<body>
<div class="page-wrap container-fluid dict-editor">

  <div class="d-flex justify-content-between align-items-center mb-2">
    <div>
      <h3 class="mb-1">欄位說明 / 資料辭典</h3>
      <div class="text-muted">
        Table：<b>@table</b>
        <span class="ms-3">Lang：<b>@lang</b></span>
      </div>
    </div>
    <div class="d-flex gap-2">
      <button class="btn btn-outline-secondary" id="btnReload">重整</button>
      <button class="btn btn-primary" id="btnSaveAll">全部儲存</button>
    </div>
  </div>

  <div class="table-responsive" style="max-height:70vh;border:1px solid #e5e7eb;border-radius:8px;">
    <!-- 關鍵：加上 id="dictTable" 讓上面的覆寫規則吃到 -->
    <table id="dictTable" class="table table-bordered table-sm align-middle mb-0">
      <thead>
        <tr>
          <th class="text-center">序號</th>
          <th>欄位名稱</th>
          <th>顯示名稱</th>
          <th class="text-center">可視</th>
          <th>型別</th>
          <th>輸出格式</th>
          <th>說明</th>
          <th>欄寬</th>
          <th>標籤高</th>
          <th>標籤Y</th>
          <th>標籤X</th>
          <th>標籤寬</th>
          <th>欄位高</th>
          <th>欄位Y</th>
          <th>欄位X</th>
          <th>欄位寬</th>
          <th>搜尋表格</th>
          <th>搜尋鍵</th>
          <th>搜尋欄位</th>
          <th>備註</th>
        </tr>
      </thead>
      <tbody id="dictTableBody" class="dictTableBody">
        <!-- JS 動態填入 -->
      </tbody>
    </table>
  </div>

  <p class="mt-2 text-muted small">
    ※ 本頁使用 <code>/api/TableFieldLayout/DictFields</code> 載入，存檔呼叫
    <code>/api/DictApi/UpdateDictFields</code> 與 <code>/api/DictApi/UpdateDictFieldsLayout</code>。
  </p>
</div>

<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- 若你專案裡有這支（建議放）：wwwroot/js/fieldDictModal.js -->
<script src="~/js/fieldDictModal.js"></script>

<script>
const TABLE = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(table));
const LANG  = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(lang));
const FOCUS = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(field));

const $tbody = $('#dictTableBody');

function td(html){ return `<td>${html||''}</td>`; }
function tdNum(name, v, w=60){ return td(`<input data-field="${name}" type="number" class="form-control form-control-sm text-center" value="${v ?? ''}" style="width:${w}px;">`); }
function tdTxt(name, v, w=140, ro=false){
  const roAttr = ro ? 'readonly' : '';
  const bg = ro ? 'style="background:#f7f7f7;color:#6c757d;border-color:#dee2e6;width:'+w+'px;"' : 'style="width:'+w+'px;"';
  return td(`<input data-field="${name}" class="form-control form-control-sm" value="${v ?? ''}" ${bg} ${roAttr}>`);
}
function tdChk(name, checked){ return td(`<input data-field="${name}" type="checkbox" class="form-check-input" ${checked? 'checked':''}>`); }

async function loadDict(){
  $tbody.html(`<tr><td colspan="20" class="text-center text-muted py-3">載入中...</td></tr>`);
  try{
    const url = `/api/TableFieldLayout/DictFields?table=${encodeURIComponent(TABLE)}&lang=${encodeURIComponent(LANG||'TW')}`;
    const res = await fetch(url);
    if(!res.ok) throw new Error(`HTTP ${res.status}`);
    const rows = await res.json();
    if(!Array.isArray(rows)) throw new Error('payload is not array');

    const html = rows.map(r=>{
      const trClass = (FOCUS && r.FieldName === FOCUS) ? 'focus-row' : '';
      return `
      <tr class="${trClass}"
          data-tablename="${TABLE}"
          data-fieldname="${r.FieldName}">
        ${tdNum('SerialNum', r.SerialNum, 60)}
        ${td(`<span class="fw-semibold">${r.FieldName}</span>`)}
        ${tdTxt('DisplayLabel', r.DisplayLabel, 220)}
        ${tdChk('Visible', !!r.Visible)}
        ${tdTxt('DataType', r.DataType, 90, true)}
        ${tdTxt('FormatStr', r.FormatStr, 160)}
        ${tdTxt('FieldNote', '', 180)}
        ${tdNum('DisplaySize', r.DisplaySize ?? '', 70)}

        ${tdNum('iLabHeight', '', 70)}
        ${tdNum('iLabTop',    '', 70)}
        ${tdNum('iLabLeft',   '', 70)}
        ${tdNum('iLabWidth',  '', 70)}

        ${tdNum('iFieldHeight','', 70)}
        ${tdNum('iFieldTop',   '', 70)}
        ${tdNum('iFieldLeft',  '', 70)}
        ${tdNum('iFieldWidth', '', 70)}

        ${tdTxt('LookupTable',        '', 150)}
        ${tdTxt('LookupKeyField',     '', 140)}
        ${tdTxt('LookupResultField',  '', 160)}
        ${tdTxt('IsNotesField',       '', 80)}
      </tr>`;
    }).join('');
    $tbody.html(html || `<tr><td colspan="20" class="text-center text-muted py-3">無資料</td></tr>`);
    // 滾到 focus 列
    const focusEl = document.querySelector('.focus-row');
    if (focusEl) focusEl.scrollIntoView({block:'center'});
  }catch(e){
    $tbody.html(`<tr><td colspan="20" class="text-danger text-center py-3">載入失敗：${String(e)}</td></tr>`);
  }
}

function collectRows() {
  const rows = [];
  $tbody.find('tr[data-fieldname]').each(function(){
    const $tr = $(this);
    const get = n => $tr.find(`[data-field="${n}"]`).val?.() ?? '';
    const getNum = n => parseInt(get(n) || '0', 10);
    const getChk = n => $tr.find(`[data-field="${n}"]`).is(':checked') ? 1 : 0;

    rows.push({
      TableName: $tr.data('tablename'),
      FieldName: $tr.data('fieldname'),

      SerialNum: getNum('SerialNum'),
      DisplayLabel: get('DisplayLabel'),
      Visible: getChk('Visible'),
      DataType: get('DataType'),
      FormatStr: get('FormatStr'),
      FieldNote: get('FieldNote'),
      DisplaySize: getNum('DisplaySize'),

      iLabHeight:  getNum('iLabHeight'),
      iLabTop:     getNum('iLabTop'),
      iLabLeft:    getNum('iLabLeft'),
      iLabWidth:   getNum('iLabWidth'),

      iFieldHeight:getNum('iFieldHeight'),
      iFieldTop:   getNum('iFieldTop'),
      iFieldLeft:  getNum('iFieldLeft'),
      iFieldWidth: getNum('iFieldWidth'),

      LookupTable:        get('LookupTable'),
      LookupKeyField:     get('LookupKeyField'),
      LookupResultField:  get('LookupResultField'),
      IsNotesField:       get('IsNotesField')
    });
  });
  return rows;
}

// 優先使用你專案現成的 saveAllDictFields，否則使用 fallback
async function doSave(){
  // 有全域函式就直接用（跟原本一模一樣）
  if (typeof window.saveAllDictFields === 'function'){
    return window.saveAllDictFields('#dictTableBody');
  }

  // ===== Fallback：呼叫 /api/DictApi 兩支 =====
  const rows = collectRows();
  if (!rows.length) return;

  // 切成兩包：欄位內容 & 版面
  const fields = rows.map(r => ({
    TableName: r.TableName, FieldName: r.FieldName,
    SerialNum: r.SerialNum, DisplayLabel: r.DisplayLabel, Visible: r.Visible,
    DataType: r.DataType, FormatStr: r.FormatStr, FieldNote: r.FieldNote,
    DisplaySize: r.DisplaySize, LookupTable: r.LookupTable,
    LookupKeyField: r.LookupKeyField, LookupResultField: r.LookupResultField,
    IsNotesField: r.IsNotesField
  }));
  const layout = rows.map(r => ({
    TableName: r.TableName, FieldName: r.FieldName, SerialNum: r.SerialNum,
    iLabHeight: r.iLabHeight, iLabTop: r.iLabTop, iLabLeft: r.iLabLeft, iLabWidth: r.iLabWidth,
    iFieldHeight: r.iFieldHeight, iFieldTop: r.iFieldTop, iFieldLeft: r.iFieldLeft, iFieldWidth: r.iFieldWidth
  }));

  const postJson = async (url, body) => {
    const res = await fetch(url, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify(body) });
    const txt = await res.text();
    let json; try{ json = JSON.parse(txt); }catch{ json = { ok: res.ok, raw: txt }; }
    if(!res.ok){ throw new Error(json?.error || txt || `HTTP ${res.status}`); }
    return json;
  };

  try{
    await Swal.fire({title:'儲存中…', allowOutsideClick:false, didOpen:()=>Swal.showLoading()});
    await postJson('/api/DictApi/UpdateDictFields',       { tableName: TABLE, rows: fields });
    await postJson('/api/DictApi/UpdateDictFieldsLayout', { tableName: TABLE, rows: layout });
    await Swal.fire({icon:'success', title:'儲存完成', timer:900, showConfirmButton:false});
  }catch(err){
    Swal.fire({icon:'error', title:'儲存失敗', text:String(err)});
  }
}

$('#btnReload').on('click', ()=> location.reload());
$('#btnSaveAll').on('click', doSave);
loadDict();
</script>
</body>
</html>
